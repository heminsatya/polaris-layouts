{"version":3,"file":"polaris.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACoC;AACpC;AACA;AACA;AACO,yBAAyB,6CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY;AAC9E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;AC1RA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,yBAAyB,mDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wCAAwC,6CAA6C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,yBAAyB,mDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,SAAS,MAAM,QAAQ;AACtF;AACA,iFAAiF,SAAS,MAAM,QAAQ;AACxG;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS,MAAM,QAAQ;AAC1F;AACA,qFAAqF,SAAS,MAAM,QAAQ;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mDAAmD,iDAAiD;AACpG,mDAAmD,iDAAiD;AACpG,oDAAoD,kDAAkD;AACtG;AACA;AACA;AACA;AACA,mDAAmD,iDAAiD;AACpG;AACA;AACA;AACA,6GAA6G,gBAAgB;AAC7H,mDAAmD,iDAAiD;AACpG;AACA;AACA;AACA,8GAA8G,kBAAkB;AAChI,oDAAoD,kDAAkD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gDAAgD,IAAI,UAAU,sBAAsB,kDAAkD,EAAE,aAAa;AACnN,aAAa;AACb;AACA;AACA;AACA,yDAAyD,iDAAiD;AAC1G;AACA;AACA;AACA,uEAAuE,gDAAgD;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,gDAAgD,IAAI,MAAM,sBAAsB,kDAAkD,EAAE,aAAa;AACnN;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mDAAmD,iDAAiD;AACpG,oDAAoD,kDAAkD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iDAAiD;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kDAAkD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAA6C;AAC3E;AACA,wCAAwC,8CAA8C,EAAE,mBAAmB;AAC3G;AACA;AACA,wCAAwC,8CAA8C,EAAE,gBAAgB;AACxG;AACA;AACA,wCAAwC,8CAA8C,EAAE,iBAAiB;AACzG;AACA;AACA;AACA;AACA,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA;AACA,uCAAuC,+CAA+C,EAAE,aAAa;AACrG,6BAA6B,8CAA8C;AAC3E;AACA;AACA,qCAAqC,wDAAwD,EAAE,mBAAmB,0BAA0B,QAAQ,wBAAwB,SAAS,GAAG;AACxL;AACA,kCAAkC,gDAAgD;AAClF;AACA;AACA;AACA;AACA;AACA,kDAAkD,0CAA0C;AAC5F;AACA;AACA;AACA;AACA,yDAAyD,SAAS,IAAI,2BAA2B;AACjG;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,sCAAsC,8CAA8C;AACpF,sCAAsC,8CAA8C;AACpF;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4BAA4B,oCAAoC;AAChE;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA,uCAAuC,+CAA+C,EAAE,aAAa;AACrG;AACA;AACA;AACA;AACA,2CAA2C,+CAA+C,IAAI,OAAO;AACrG;AACA;AACA,qCAAqC,yCAAyC,EAAE,oBAAoB,2DAA2D,QAAQ,wBAAwB,SAAS,GAAG;AAC3M;AACA,qCAAqC,+CAA+C;AACpF,0BAA0B,MAAM;AAChC;AACA,mCAAmC,6CAA6C;AAChF;AACA;AACA;AACA;AACA;AACA,kDAAkD,0CAA0C;AAC5F;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8CAA8C;AAClF,oCAAoC,8CAA8C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8CAA8C;AACrF,uCAAuC,8CAA8C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gDAAgD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gDAAgD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gDAAgD;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,gDAAgD;AACnH;AACA;AACA,oEAAoE,gDAAgD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uCAAuC,8CAA8C;AACrF;AACA;AACA,uDAAuD,8CAA8C;AACrG;AACA;AACA,8CAA8C,gBAAgB,SAAS,8CAA8C;AACrH;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+CAA+C,6CAA6C;AAC5F,8CAA8C,6CAA6C;AAC3F;AACA;AACA;AACA,2CAA2C,6CAA6C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8CAA8C;AACtG,oDAAoD,6CAA6C;AACjG,kDAAkD,2CAA2C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6CAA6C;AACpG;AACA,gDAAgD,6CAA6C;AAC7F;AACA;AACA,qDAAqD,2CAA2C;AAChG,0DAA0D,iDAAiD,aAAa,QAAQ;AAChI;AACA,kDAAkD,2CAA2C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8DAA8D,sDAAsD;AACpH,oDAAoD,oDAAoD;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gDAAgD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gDAAgD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gDAAgD;AACzF;AACA;AACA,kEAAkE,gDAAgD;AAClH;AACA;AACA;AACA,uDAAuD,gDAAgD;AACvG,qDAAqD,oDAAoD;AACzG;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B;AACA,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,2CAA2C,0DAA0D;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAA0D;AACpG;AACA;AACA;AACA,6CAA6C,0DAA0D;AACvG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;ACpwBA;AACA;AACA;AACO;AACP;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B,2BAA2B;AAC3B,4BAA4B;AAC5B,8BAA8B;AAC9B,kCAAkC;AAClC,gCAAgC;AAChC,0CAA0C;AAC1C,0CAA0C;AAC1C,sCAAsC;AACtC,gCAAgC;AAChC,sCAAsC;AACtC,kCAAkC;AAClC,kCAAkC;AAClC,oCAAoC;AACpC,gCAAgC;AAChC,gCAAgC;AAChC,oCAAoC;AACpC,gCAAgC;AAChC,oCAAoC;AACpC,8BAA8B;AAC9B,+BAA+B;AAC/B,mCAAmC;AACnC,wCAAwC;AACxC,0CAA0C;AAC1C,wCAAwC;AACxC,oCAAoC;AACpC,kCAAkC;AAClC,gCAAgC;AAChC,sCAAsC;AACtC,oCAAoC;AACpC,oCAAoC;AACpC,sCAAsC;AACtC,sCAAsC;AACtC,wCAAwC;AACxC,gCAAgC;AAChC,sCAAsC;AACtC,wCAAwC;AACxC,oCAAoC;AACpC,kCAAkC;AAClC,mCAAmC;AACnC,wCAAwC;AACxC,kCAAkC;AAClC,gCAAgC;AAChC,kCAAkC;AAClC,gCAAgC;AAChC,wCAAwC;AACxC,wCAAwC;AACxC,oCAAoC;AACpC,8BAA8B;AAC9B,mCAAmC;AACnC,mCAAmC;AACnC,yCAAyC;AACzC,oCAAoC;AACpC,0CAA0C;AAC1C,sCAAsC;AACtC,sCAAsC;AACtC,uCAAuC;AACvC,+CAA+C;AAC/C,gDAAgD;AAChD,+CAA+C;AAC/C,4CAA4C;AAC5C,mCAAmC;AACnC,yCAAyC;AACzC,2CAA2C;AAC3C,uCAAuC;AACvC,yCAAyC;AACzC,iDAAiD;AACjD,iCAAiC;AACjC,uCAAuC;AACvC,4DAA4D;AAC5D,6BAA6B;AAC7B,gCAAgC;AAChC,kCAAkC;AAClC,+BAA+B;AAC/B,kCAAkC;AAClC,iCAAiC;AACjC,kCAAkC;AAClC,+BAA+B;AAC/B,0CAA0C;AAC1C,uCAAuC;AACvC,uCAAuC;AACvC,oCAAoC;AACpC,qCAAqC;AACrC,uCAAuC;AACvC,0CAA0C;AAC1C,sCAAsC;AACtC,qCAAqC;AACrC,qCAAqC;AACrC,wCAAwC;AACxC,sCAAsC;AACtC,qCAAqC;AACrC,qCAAqC;AACrC,oCAAoC;AACpC,uCAAuC;AACvC,wCAAwC;AACxC;AACA;AACA;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACsC;AACtC;AACA;AACA;AACO,mBAAmB,+CAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,uBAAuB,mDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD,iCAAiC,aAAa;AAC9C;AACA;AACA,uCAAuC,4CAA4C;AACnF,uCAAuC,2CAA2C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oCAAoC;AACrE;AACA;AACA;AACA,qCAAqC,aAAa,MAAM,oCAAoC;AAC5F;AACA;AACA;AACA,qCAAqC,oCAAoC;AACzE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,cAAc;AACxD,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA,0CAA0C,gBAAgB,kBAAkB,qBAAqB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,gBAAgB,kBAAkB,yBAAyB;AACrG;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,mBAAmB;AAC7D,0CAA0C,mBAAmB;AAC7D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,eAAe;AACzD,0CAA0C,eAAe;AACzD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,cAAc;AACxD,0CAA0C,cAAc;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,cAAc;AACxD,0CAA0C,cAAc;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,iDAAiD;AAC3F,0CAA0C,iDAAiD;AAC3F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,gDAAgD;AAC1F,0CAA0C,gDAAgD;AAC1F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,0CAA0C,6CAA6C;AACvF,0CAA0C,6CAA6C;AACvF,uCAAuC,8CAA8C;AACrF;AACA,yDAAyD,8CAA8C;AACvG;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA,0DAA0D,4CAA4C;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4CAA4C;AACvG,oDAAoD,4CAA4C;AAChG;AACA;AACA;AACA,iDAAiD,4CAA4C;AAC7F;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0CAA0C,eAAe,UAAU,6CAA6C;AAChH,0CAA0C,eAAe,UAAU,6CAA6C;AAChH;AACA,qDAAqD,eAAe,QAAQ,mBAAmB;AAC/F;AACA;AACA;AACA,sDAAsD,4CAA4C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,gDAAgD;AAC1F,0CAA0C,gDAAgD;AAC1F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,8CAA8C;AACxF,0CAA0C,8CAA8C;AACxF;AACA,oDAAoD,6CAA6C;AACjG,kDAAkD,2CAA2C;AAC7F;AACA;AACA;AACA;AACA;AACA,kDAAkD,iDAAiD,aAAa,QAAQ;AACxH;AACA,8CAA8C,2CAA2C;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6CAA6C;AACpG,wDAAwD,8CAA8C,aAAa,KAAK;AACxH;AACA,oDAAoD,6CAA6C;AACjG;AACA,qDAAqD,2CAA2C;AAChG,sDAAsD,iDAAiD,aAAa,KAAK;AACzH;AACA,kDAAkD,2CAA2C;AAC7F;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,gBAAgB;AAC1D,0CAA0C,gBAAgB;AAC1D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,sDAAsD;AAChG,0CAA0C,sDAAsD;AAChG;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjXA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACO,sBAAsB,2CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,gBAAgB;AAChB;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,UAAU;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B;AACA,aAAa,aAAa;AAC1B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7yBa;AACb;AACA;AACA;AACqE;AACrE;AACA;AACA;AACO,wBAAwB,+EAAU;AACzC;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,oBAAoB;AACnC;AACA,uCAAuC;AACvsEAAsE,0DAA0D;AAChI;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,2DAA2D;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA,yDAAyD,2DAA2D;AACpH,uEAAuE,2DAA2D;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,6DAA6D;AACzH,6EAA6E,6DAA6D;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,4DAA4D,6DAA6D;AACzH,6EAA6E,6DAA6D;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA,0CAA0C,iBAAiB,GAAG,eAAe;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,4BAA4B,gBAAgB,iBAAiB,UAAU,KAAK;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8DAA8D;AAChH;AACA;AACA;AACA,kDAAkD,6DAA6D;AAC/G;AACA;AACA;AACA,kDAAkD,0DAA0D;AAC5G,iDAAiD;AACjD;AACA;AACA,kDAAkD,0DAA0D;AAC5G,iDAAiD;AACjD;AACA;AACA;AACA,kDAAkD,0DAA0D;AAC5G;AACA,gCAAgC,qBAAqB;AACrD;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA,sEAAsE,8DAA8D;AACpI,qEAAqE,6DAA6D;AAClI,kEAAkE,0DAA0D;AAC5H,kEAAkE,0DAA0D;AAC5H,qEAAqE,2DAA2D;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0DAA0D;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0DAA0D;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH,4CAA4C;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAA4C;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0DAA0D;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,8DAA8D;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iEAAiE,8DAA8D;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,eAAe,oCAAoC;AAChE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,2DAA2D;AAC3G,sDAAsD,6DAA6D;AACnH,sDAAsD,6DAA6D;AACnH;AACA,mEAAmE,0DAA0D,GAAG,gBAAgB;AAChJ,kEAAkE,2DAA2D,KAAK,gBAAgB;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2DAA2D;AACvG,kDAAkD,6DAA6D;AAC/G,kDAAkD,6DAA6D;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,qDAAqD,gCAAgC,GAAG,gBAAgB;AACxG;AACA;AACA;AACA;AACA;AACA;;;;;;UC3tCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;;GAEG;AACoD;AAGvD;;GAEG;AACmE;AAGtE;;GAEG;AACH,MAAM,OAAO,GAAG;IACZ,IAAI,EAAE,mEAAI;IACV,SAAS,EAAE,kFAAS;CACvB;AAGD;;GAEG;AACH,iEAAe,OAAO,EAAC","sources":["webpack://Polaris/webpack/universalModuleDefinition","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Animations.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Blueprints.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Components.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Config.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Core.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Defaults.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Helpers.js","webpack://Polaris/./node_modules/polaris-slideshow/dist/js/modules/Slideshow.js","webpack://Polaris/webpack/bootstrap","webpack://Polaris/webpack/runtime/define property getters","webpack://Polaris/webpack/runtime/hasOwnProperty shorthand","webpack://Polaris/webpack/runtime/make namespace object","webpack://Polaris/./src/ts/polaris.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Polaris\"] = factory();\n\telse\n\t\troot[\"Polaris\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * Import the parent Class\r\n */\r\nimport { Helpers } from \"./Helpers\";\r\n/**\r\n * @desc Used for setting & handling animations\r\n */\r\nexport class Animations extends Helpers {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Sets and returns a new animation Promise\r\n     *\r\n     * @param {any}     selector  -- The selector name (object)\r\n     * @param {string}  animation -- The animation name\r\n     * @param {boolean} clear     -- For clearing the animation after it has been ended\r\n     *\r\n     * @return {any}\r\n     */\r\n    animation(selector, animation = \"\", clear = false) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check animation\r\n        if (animation == \"\") {\r\n            // Unset the animation\r\n            // node.removeAttribute('data-animation');\r\n            node.style.removeProperty('animation-name');\r\n            // Exit the method\r\n            return false;\r\n        }\r\n        // // Check current animation\r\n        // if (this.getStyle(selector, 'animation-name') == animation) {\r\n        //     // TODO\r\n        // }\r\n        // // Wait for all animations to be finished\r\n        // Promise.all(\r\n        //     node.getAnimations({ subtree: false })\r\n        //     .map((animation:any) => animation.finished)\r\n        // ).then(() => {\r\n        //     // TODO\r\n        // });\r\n        // Animation promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            // Check datasets and set variables\r\n            this.datasets(node);\r\n            // Set the new animation\r\n            // node.setAttribute(\"data-animation\", animation);\r\n            node.style.setProperty('animation-name', animation);\r\n            // Animation resolve callback\r\n            function animationEnd(event) {\r\n                event.stopPropagation();\r\n                // Check animation clearance\r\n                if (clear) {\r\n                    // node.removeAttribute('data-animation');\r\n                    node.style.removeProperty('animation-name');\r\n                }\r\n                // Promise on resolve\r\n                resolve('Animation ended!');\r\n                // Promise on reject\r\n                reject('Animation crashed!');\r\n            }\r\n            // Animation end listener\r\n            node.addEventListener('animationend', animationEnd, { once: true });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Checks animation datasets and sets relevant variables\r\n     *\r\n     * @param {object} selector -- The selector object\r\n     *\r\n     * @return {void}\r\n     */\r\n    datasets(selector) {\r\n        // data-animation\r\n        if (selector.dataset.animation) {\r\n            selector.style.setProperty('animation-name', selector.dataset.animation);\r\n        }\r\n        // data-duration\r\n        if (selector.dataset.duration) {\r\n            selector.style.setProperty('--animation-duration', selector.dataset.duration);\r\n        }\r\n        // data-delay\r\n        if (selector.dataset.delay) {\r\n            selector.style.setProperty('--animation-delay', selector.dataset.delay);\r\n        }\r\n        // data-count\r\n        if (selector.dataset.count) {\r\n            selector.style.setProperty('--animation-count', selector.dataset.count);\r\n        }\r\n        // data-function\r\n        if (selector.dataset.function) {\r\n            selector.style.setProperty('--animation-function', selector.dataset.function);\r\n        }\r\n        // data-state\r\n        if (selector.dataset.state) {\r\n            selector.style.setProperty('--animation-state', selector.dataset.state);\r\n        }\r\n        // data-position\r\n        if (selector.dataset.position) {\r\n            selector.style.setProperty('--animation-position', selector.dataset.position);\r\n        }\r\n        // data-scale\r\n        if (selector.dataset.scale) {\r\n            selector.style.setProperty('--animation-scale', selector.dataset.scale);\r\n        }\r\n        // data-perspective\r\n        if (selector.dataset.perspective) {\r\n            selector.style.setProperty('--animation-perspective', selector.dataset.perspective);\r\n        }\r\n        // data-degree\r\n        if (selector.dataset.degree) {\r\n            selector.style.setProperty('--animation-degree', selector.dataset.degree);\r\n        }\r\n        // data-height\r\n        if (selector.dataset.height) {\r\n            selector.style.setProperty('--animation-height', selector.dataset.height);\r\n        }\r\n        // data-width\r\n        if (selector.dataset.width) {\r\n            selector.style.setProperty('--animation-width', selector.dataset.width);\r\n        }\r\n        // data-brightness\r\n        if (selector.dataset.brightness) {\r\n            selector.style.setProperty('--animation-brightness', selector.dataset.brightness);\r\n        }\r\n        // data-dimension\r\n        if (selector.dataset.dimension) {\r\n            selector.style.setProperty('--animation-dimension', selector.dataset.dimension);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Makes selectors animated\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string}          mod      -- The scroll mod\r\n     *\r\n     * @return {void}\r\n     */\r\n    animated(selector, mod = 'bottom') {\r\n        let nodes = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                nodes = document.querySelectorAll(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                nodes = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        nodes.forEach((node) => {\r\n            let tolerance = node.dataset.tolerance;\r\n            let animationEnter = node.dataset.enter;\r\n            let animationExit = node.dataset.exit;\r\n            // Check data-tolerance\r\n            if (!tolerance) {\r\n                tolerance = 0;\r\n            }\r\n            // Check data-enter\r\n            if (!animationEnter) {\r\n                animationEnter = 'fadeIn';\r\n            }\r\n            // Check data-exit\r\n            if (!animationExit) {\r\n                animationExit = 'fadeOut';\r\n            }\r\n            // Check element visibility\r\n            if (this.visible(node, mod, tolerance)) {\r\n                // Animation enter\r\n                this.animation(node, animationEnter);\r\n            }\r\n            else {\r\n                // Animation exit\r\n                this.animation(node, animationExit);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Loops an animation\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {number}          duration -- The loop duration (in miliseconds)\r\n     * @param {number}          count    -- The loop count\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    animating(selector, duration = 1000, count = Infinity) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check element visibility\r\n        if (this.visible(node, \"both\", 0)) {\r\n            this.loop(() => {\r\n                let animation = node.getAttribute('data-animation');\r\n                // node.removeAttribute('data-animation');\r\n                node.style.removeProperty('animation-name');\r\n                node.offsetTop;\r\n                // node.setAttribute('data-animation', animation);\r\n                node.style.setProperty('animation-name', animation);\r\n            }, duration, count - 1);\r\n        }\r\n    }\r\n    /**\r\n     * @desc For navigation active class (for page scroll)\r\n     *\r\n     * @param {string | object} navigators -- The navigators selector name (object)\r\n     * @param {string | object} navigateds -- The navigateds selector name (object)\r\n     * @param {string}          active     -- The navigator active class\r\n     * @param {number}          tolerance  -- The scroll tolerance\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    navigated(navigators, navigateds, active = 'active', tolerance = 0) {\r\n        // Check the navigator selectors\r\n        if (this.exist(navigators)['status']) {\r\n            if (typeof (navigators) === \"string\") {\r\n                navigators = document.querySelectorAll(navigators);\r\n            }\r\n            else if (typeof (navigator) === \"object\") {\r\n                navigators = navigators;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(navigators)['message'];\r\n        }\r\n        // Check the navigated selectors\r\n        if (this.exist(navigateds)['status']) {\r\n            if (typeof (navigateds) === \"string\") {\r\n                navigateds = document.querySelectorAll(navigateds);\r\n            }\r\n            else if (typeof (navigateds) === \"object\") {\r\n                navigateds = navigateds;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(navigateds)['message'];\r\n        }\r\n        // Handle navigators active class\r\n        navigateds.forEach((node) => {\r\n            const scroll = window.scrollY;\r\n            const height = node.offsetHeight;\r\n            const offset = node.getBoundingClientRect().top + window.scrollY - tolerance; // node.offsetTop - tolerance;\r\n            const id = node.getAttribute(\"id\");\r\n            // Set the active class\r\n            if (scroll >= offset && scroll < offset + height) {\r\n                navigators.forEach((link) => {\r\n                    (link.getAttribute(\"href\") == '#' + id) ? link.classList.add(active) : link.classList.remove(active);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=Animations.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Components } from \"./Components\";\r\n/**\r\n * @desc Used for loading component blueprints\r\n */\r\nexport class Blueprints extends Components {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Appends backdrop blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    backdropBlueprint() {\r\n        // Check backdrop blueprint\r\n        if (!document.querySelector(`#${this.nameBackdrop + '-' + this.nameBlueprint}`)) {\r\n            // Append backdrop blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameBackdrop, this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated], this.nameBackdrop + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Appends alert blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    alertBlueprint() {\r\n        // Check alert blueprint\r\n        if (!document.querySelector(`#${this.nameAlert + '-' + this.nameBlueprint}`)) {\r\n            // Append alert blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameAlert + this.parSep + this.nameContainer, this.nameAlert + this.parSep + this.nameContainer + this.modSep + this.alertPosition], this.nameAlert + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Append modal blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    modalBlueprint() {\r\n        // Check modal blueprint\r\n        if (!document.querySelector(`#${this.nameModal + '-' + this.nameBlueprint}`)) {\r\n            // Append modal blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameModal + this.parSep + this.nameContainer, this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated], this.nameModal + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Blueprints.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Animations } from \"./Animations\";\r\n/**\r\n * @desc Used for handling Components (Utilities)\r\n */\r\nexport class Components extends Animations {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Hadnles tabs\r\n     *\r\n     * @param {HTMLElement} sel -- The tab selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    range(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        let progress, distort = 0;\r\n        let thumbWidth;\r\n        // Set thumbWidth\r\n        if (selector.classList.contains(this.nameRange + this.modSep + \"xs\")) {\r\n            thumbWidth = this.rangeWidthXS;\r\n        }\r\n        else if (selector.classList.contains(this.nameRange + this.modSep + \"sm\")) {\r\n            thumbWidth = this.rangeWidthSM;\r\n        }\r\n        else if (selector.classList.contains(this.nameRange + this.modSep + \"md\")) {\r\n            thumbWidth = this.rangeWidthMD;\r\n        }\r\n        else if (selector.classList.contains(this.nameRange + this.modSep + \"lg\")) {\r\n            thumbWidth = this.rangeWidthLG;\r\n        }\r\n        else if (selector.classList.contains(this.nameRange + this.modSep + \"xl\")) {\r\n            thumbWidth = this.rangeWidthXL;\r\n        }\r\n        else {\r\n            thumbWidth = this.rangeWidthMD;\r\n        }\r\n        // Handle range on load\r\n        progress = (Number(selector.value) - Number(selector.min)) / (Number(selector.max) - Number(selector.min)) * 100;\r\n        distort = (50 - progress) * thumbWidth / 100;\r\n        selector.style.setProperty(\"--range-progress\", `calc(${progress}% + ${distort}rem)`);\r\n        if (selector.parentElement.classList.contains(this.nameRange + this.parSep + this.nameControl)) {\r\n            selector.parentElement.style.setProperty(\"--range-progress\", `calc(${progress}% + ${distort}rem)`);\r\n        }\r\n        // Handle range on input\r\n        selector.oninput = () => {\r\n            progress = (Number(selector.value) - Number(selector.min)) / (Number(selector.max) - Number(selector.min)) * 100;\r\n            distort = (50 - progress) * thumbWidth / 100;\r\n            selector.style.setProperty(\"--range-progress\", `calc(${progress}% + ${distort}rem)`);\r\n            if (selector.parentElement.classList.contains(this.nameRange + this.parSep + this.nameControl)) {\r\n                selector.parentElement.style.setProperty(\"--range-progress\", `calc(${progress}% + ${distort}rem)`);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Hadnles chips\r\n     *\r\n     * @param {HTMLElement} sel -- The chip selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    chip(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Fetch chip elements\r\n        let chipItems = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipItems}`);\r\n        let chipInput = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipInput}`);\r\n        let chipOutput = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipOutput}`);\r\n        let chipValues = [];\r\n        // Check chip--items\r\n        if (!chipItems) {\r\n            this.prepend('div', selector, '', [this.nameChip + this.chiSep + this.nameChipItems]);\r\n            chipItems = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipItems}`);\r\n        }\r\n        // Check chip--input\r\n        if (!chipInput) {\r\n            this.append('input', selector, '', [this.nameChip + this.chiSep + this.nameChipInput], '', '', { \"type\": \"text\" });\r\n            chipInput = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipInput}`);\r\n        }\r\n        // Check chip--output\r\n        if (!chipOutput) {\r\n            this.append('input', selector, '', [this.nameChip + this.chiSep + this.nameChipOutput], '', '', { \"type\": \"hidden\" });\r\n            chipOutput = selector.querySelector(`.${this.nameChip + this.chiSep + this.nameChipOutput}`);\r\n        }\r\n        // Check chip--output value\r\n        if (chipOutput.value.trim()) {\r\n            chipValues = chipOutput.value.split(',');\r\n            chipItems.innerHTML = \"\";\r\n            chipValues.forEach((chipValue) => {\r\n                this.append('div', chipItems, `<span class=\"${this.nameChip + this.chiSep + this.nameChipText}\">${chipValue}</span><span class=\"${this.nameChip + this.chiSep + this.nameChipClose} ${this.piClose}\"></span>`, [this.nameChip + this.chiSep + this.nameChipItem]);\r\n            });\r\n        }\r\n        // Handle chip--close on click\r\n        const chipClose = () => {\r\n            const items = chipItems.querySelectorAll(`.${this.nameChip + this.chiSep + this.nameChipClose}`);\r\n            items.forEach((item) => {\r\n                item.onclick = () => {\r\n                    // Find value\r\n                    const value = item.parentElement.querySelector(`.${this.nameChip + this.chiSep + this.nameChipText}`).innerHTML;\r\n                    // Update chipValues\r\n                    chipValues.splice(chipValues.indexOf(value), 1);\r\n                    // Update chipOutput\r\n                    chipOutput.value = chipValues.toString();\r\n                    // Remove item\r\n                    this.remove(item.parentElement);\r\n                };\r\n            });\r\n        };\r\n        // Call chipClose onload\r\n        chipClose();\r\n        // Handle chip--input on enter\r\n        chipInput.onkeydown = (event) => {\r\n            if (event.keyCode === 13) {\r\n                // Prevent default behavior\r\n                event.preventDefault();\r\n                let value = chipInput.value.trim();\r\n                // Prevent repetitive value insertion\r\n                if (!chipValues.includes(value) && value && !value.includes(\",\")) {\r\n                    // Update chip values\r\n                    chipValues.push(value);\r\n                    // Update chip--output\r\n                    chipOutput.value = chipValues.toString();\r\n                    // Append chip--item\r\n                    this.append('div', chipItems, `<span class=\"${this.nameChip + this.chiSep + this.nameChipText}\">${value}</span><span class=\"${this.nameChip + this.chiSep + this.nameChipClose} ${this.piClose}\"></span>`, [this.nameChip + this.chiSep + this.nameChipItem]);\r\n                    // Empty chip--input\r\n                    chipInput.value = \"\";\r\n                    // chipClose recursion\r\n                    chipClose();\r\n                }\r\n                // Check autocomplete\r\n                if (selector.querySelector(`.${this.nameAuto}`)) {\r\n                    chipInput.blur();\r\n                    this.auto(selector.querySelector(`.${this.nameAuto}`));\r\n                    chipInput.focus();\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Hadnles autocomplete\r\n     *\r\n     * @param {HTMLElement} sel -- The autocomplete selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    auto(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Fetch elements\r\n        let autoInput = selector.querySelector(`.${this.nameAuto + this.chiSep + this.nameAutoInput}`);\r\n        let autoOutput = selector.querySelector(`.${this.nameAuto + this.chiSep + this.nameAutoOutput}`);\r\n        let autoItems;\r\n        // Check auto--input data-items\r\n        if (!autoInput.hasAttribute(\"data-items\")) {\r\n            autoInput.setAttribute(\"data-items\", \"\");\r\n        }\r\n        // Check auto--input\r\n        if (!autoInput) {\r\n            this.prepend('input', selector, '', [this.nameAuto + this.chiSep + this.nameAutoInput]);\r\n            autoInput = selector.querySelector(`.${this.nameAuto + this.chiSep + this.nameAutoInput}`);\r\n        }\r\n        // Check auto--input data-sort\r\n        if (!autoInput.hasAttribute(\"data-sort\")) {\r\n            autoInput.setAttribute(\"data-sort\", true);\r\n        }\r\n        // Check auto--input autocomplete\r\n        if (!autoInput.hasAttribute(\"autocomplete\")) {\r\n            autoInput.setAttribute(\"autocomplete\", \"off\");\r\n        }\r\n        // Check auto--output\r\n        if (!autoOutput) {\r\n            this.append('ul', selector, '', [this.nameAuto + this.chiSep + this.nameAutoOutput]);\r\n            autoOutput = selector.querySelector(`.${this.nameAuto + this.chiSep + this.nameAutoOutput}`);\r\n        }\r\n        // Set auto--output items\r\n        autoItems = autoInput.dataset.items.split(',');\r\n        // Sort auto--output items\r\n        if (autoInput.dataset.sort === \"true\") {\r\n            autoItems.sort();\r\n        }\r\n        // Update auto--output items\r\n        autoOutput.innerHTML = \"\";\r\n        for (let item of autoItems) {\r\n            this.append('li', autoOutput, item);\r\n        }\r\n        // Handle auto--input data-default focus in\r\n        if (autoInput.dataset.default === \"true\") {\r\n            autoInput.onfocus = () => {\r\n                if (!autoInput.value) {\r\n                    autoOutput.classList.add(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n                }\r\n            };\r\n        }\r\n        // Item select function\r\n        const itemSelect = (item) => {\r\n            // Set auto--input value\r\n            autoInput.value = item.innerHTML;\r\n            autoInput.focus();\r\n            // Hide auto--output\r\n            autoOutput.classList.remove(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n        };\r\n        // Handle items on click\r\n        autoOutput.querySelectorAll(\"li\").forEach((item) => {\r\n            item.onclick = () => {\r\n                itemSelect(item);\r\n            };\r\n        });\r\n        // Handle auto--input input\r\n        autoInput.oninput = () => {\r\n            // Check the input\r\n            if (autoInput.value) {\r\n                autoOutput.classList.add(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n            }\r\n            else {\r\n                autoOutput.classList.add(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n                if (autoInput.dataset.default === \"true\") {\r\n                    autoOutput.classList.add(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n                }\r\n                else {\r\n                    autoOutput.classList.remove(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n                }\r\n            }\r\n            // Filter the items\r\n            let newItems = [];\r\n            for (let item of autoItems) {\r\n                if (item.substr(0, autoInput.value.length).toUpperCase() == autoInput.value.toUpperCase()) {\r\n                    newItems.push(item);\r\n                }\r\n            }\r\n            autoOutput.innerHTML = \"\";\r\n            for (let item of newItems) {\r\n                this.append('li', autoOutput, item);\r\n            }\r\n            // Handle new items on click\r\n            autoOutput.querySelectorAll(\"li\").forEach((item) => {\r\n                item.onclick = () => {\r\n                    itemSelect(item);\r\n                };\r\n            });\r\n        };\r\n        // Handle auto--input focus out\r\n        autoInput.onblur = () => {\r\n            autoOutput.classList.remove(this.nameAuto + this.chiSep + this.nameAutoOpen);\r\n        };\r\n    }\r\n    // Set Alert\r\n    /**\r\n     * @desc Sets an alert to alert__container#alert-blueprint\r\n     *\r\n     * @param {string} text     -- Alert text\r\n     * @param {string} enter    -- Alert animation enter\r\n     * @param {string} exit     -- Alert animation exit\r\n     * @param {string} status   -- Alert status: notice | warning | success\r\n     * @param {string} color    -- Alert color:  light | dark\r\n     * @param {boolean} close   -- Closable alert: true | false\r\n     * @param {number} duration -- Alert animation duration: number in miliseconds\r\n     * @param {number} delay    -- Alert animation delay: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    alert(text, enter = \"fadeIn\", exit = \"fadeOut\", status = \"\", color = \"\", close = true, duration = 500, delay = 250) {\r\n        // Set the status code\r\n        let statusCode = \"\";\r\n        let statusClass = \"\";\r\n        if (status)\r\n            statusClass = ` ${this.nameAlert + this.modSep + this.nameIcon}`;\r\n        if (status === \"notice\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertCircle}\"></div>`;\r\n        }\r\n        else if (status === \"warning\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertTri}\"></div>`;\r\n        }\r\n        else if (status === \"success\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertTick}\"></div>`;\r\n        }\r\n        // Set the color class\r\n        let colorClass = \"\";\r\n        if (color === \"light\") {\r\n            colorClass = ` ${this.nameAlert + this.modSep + color}`;\r\n        }\r\n        // Check the closable\r\n        let closeCode = \"\";\r\n        let closeClass = \"\";\r\n        if (close) {\r\n            closeCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameClose} ${this.piClose}\"></div>`;\r\n            closeClass = ` ${this.nameAlert + this.modSep + this.nameClose}`;\r\n        }\r\n        // Produce the alert content\r\n        let content = `<div class=\"${this.nameAlert + colorClass + statusClass + closeClass} ${this.nameAnimation}\" style=\"animation-name:${enter}; --animation-duration: ${duration}ms;\">`;\r\n        content += statusCode;\r\n        content += `<div class=\"${this.nameAlert + this.chiSep + this.nameContent}\">`;\r\n        content += text;\r\n        content += '</div>';\r\n        content += closeCode;\r\n        content += '</div>';\r\n        // Create the parent\r\n        const parent = document.querySelector(`#${this.nameAlert + '-' + this.nameBlueprint}`);\r\n        // Create the node\r\n        const element = document.createElement('div');\r\n        // Modify the node\r\n        element.classList.add(this.nameAlert + this.parSep + this.nameControl, this.nameAnimation);\r\n        element.style.cssText = `--animation-duration: ${duration}ms; --animation-height: 4.5rem;`;\r\n        element.innerHTML = content;\r\n        // Append the node to the parent\r\n        parent.appendChild(element);\r\n        // Find the child node\r\n        const child = element.querySelector(`.${this.nameAlert}`);\r\n        // Set animation exit timeout\r\n        let timeout = setTimeout(() => {\r\n            this.animation(child, exit);\r\n            timeout = setTimeout(() => {\r\n                this.animation(element, this.hideYAnimation).then(() => {\r\n                    element.remove();\r\n                });\r\n            }, delay);\r\n        }, this.hideTimeout);\r\n        // Set animation exit on click\r\n        if (element.querySelector(`.${this.nameAlert + this.chiSep + this.nameClose}`)) {\r\n            element.querySelector(`.${this.nameAlert + this.chiSep + this.nameClose}`).onclick = () => {\r\n                clearTimeout(timeout);\r\n                this.animation(child, exit);\r\n                timeout = setTimeout(() => {\r\n                    this.animation(element, this.hideYAnimation).then(() => {\r\n                        element.remove();\r\n                    });\r\n                }, delay);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets modal to modal__container#modal-blueprint\r\n     *\r\n     * @param {string} title     -- Modal title\r\n     * @param {string} body      -- Modal body\r\n     * @param {string} footer    -- Modal footer\r\n     * @param {string} size      -- Modal size (xs, sm, md, lg, xl)\r\n     * @param {string} enter     -- Modal animation enter\r\n     * @param {string} exit      -- Modal animation exit\r\n     * @param {string} color     -- Modal color:  light | dark\r\n     * @param {boolean} close    -- Closable modal: true | false\r\n     * @param {boolean} backdrop -- Has backdrop: true | false\r\n     * @param {number} duration  -- Modal animation duration: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    modal(title, body, footer = \"\", size = \"xs\", enter = \"fadeIn\", exit = \"fadeOut\", color = \"\", close = true, backdrop = true, duration = 500) {\r\n        // Check size\r\n        let sizeCLass = \"\";\r\n        if (this.polarisSizes.includes(size)) {\r\n            sizeCLass = ` ${this.nameModal + this.modSep + size}`;\r\n        }\r\n        else if (size) {\r\n            sizeCLass = ` ${size}`;\r\n        }\r\n        else {\r\n            sizeCLass = ` ${this.nameWidth}-100`;\r\n        }\r\n        // Set the color class\r\n        let colorClass = \"\";\r\n        if (color === \"light\") {\r\n            colorClass = ` ${this.nameModal + this.modSep + color}`;\r\n        }\r\n        // Check the closable\r\n        let closeCode = \"\";\r\n        if (close) {\r\n            closeCode = `<div class=\"${this.nameModal + this.chiSep + this.nameClose} ${this.piClose}\"></div>`;\r\n        }\r\n        // Check footer\r\n        let footerCode = \"\";\r\n        if (footer) {\r\n            footerCode = `<footer class=\"${this.nameModal + this.chiSep + this.nameFooter}\">${footer}</main>`;\r\n        }\r\n        // Produce the modal content\r\n        let content = `<div class=\"${this.nameModal + sizeCLass + colorClass} ${this.nameAnimation} scroll scroll-sm scroll-radius-sm\" style=\"animation-name:${enter}; --animation-duration: ${duration}ms;\">`;\r\n        content += closeCode;\r\n        content += `<header class=\"${this.nameModal + this.chiSep + this.nameHeader}\">`;\r\n        content += `<h1>${title}</h1>`;\r\n        content += '</header>';\r\n        content += `<main class=\"${this.nameModal + this.chiSep + this.nameBody}\">`;\r\n        content += body;\r\n        content += '</main>';\r\n        content += footerCode;\r\n        content += '</div>';\r\n        // Find the parent\r\n        const parent = document.querySelector(`#${this.nameModal + '-' + this.nameBlueprint}`);\r\n        // Find the backdrop\r\n        const bdrop = document.querySelector(`.${this.nameBackdrop}`);\r\n        // Create the node\r\n        const element = document.createElement('div');\r\n        // Append the node to the parent\r\n        parent.appendChild(element);\r\n        // Modify the node\r\n        element.outerHTML = content;\r\n        // Find the child node\r\n        const child = parent.querySelector(`.${this.nameModal}`);\r\n        // Hide the scrollbar\r\n        let bodyElement = document.querySelector('body');\r\n        bodyElement.style.paddingRight = this.scrollWidth() + \"px\";\r\n        bodyElement.style.overflow = \"hidden\";\r\n        // Show the backdrop\r\n        if (backdrop) {\r\n            this.animation(bdrop, this.fadeInAnimation);\r\n        }\r\n        // Show the parent\r\n        this.animation(parent, this.fadeInAnimation);\r\n        // Set animation exit on click\r\n        if (child.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`)) {\r\n            child.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`).onclick = () => {\r\n                // Hide the backdrop\r\n                if (backdrop) {\r\n                    this.animation(bdrop, this.fadeOutAnimation);\r\n                }\r\n                // Show the scrollbar\r\n                setTimeout(() => {\r\n                    bodyElement.style.paddingRight = \"\";\r\n                    bodyElement.style.overflow = \"\";\r\n                }, duration / 2);\r\n                // Hide the child\r\n                this.animation(child, exit).then(() => {\r\n                    // Remove the child\r\n                    child.remove();\r\n                    // Hide the parent\r\n                    this.animation(parent, this.fadeOutAnimation);\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets custom modal to custom modal__container\r\n     *\r\n     * @param {HTMLElement} cont      -- Modal container selector\r\n     * @param {string}      enter     -- Modal animation enter\r\n     * @param {string}      exit      -- Modal animation exit\r\n     * @param {boolean}     backdrop  -- Has backdrop: true | false\r\n     * @param {number}      duration  -- Modal animation duration: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    setModal(cont, enter = \"fadeIn\", exit = \"fadeOut\", backdrop = true, duration = 500) {\r\n        // Find the container selector\r\n        const container = this.query(cont);\r\n        // Find the modal selector\r\n        const selector = container.querySelector(`.${this.nameModal}`);\r\n        // Find the backdrop\r\n        const bdrop = document.querySelector(`.${this.nameBackdrop}`);\r\n        // Hide the scrollbar\r\n        let bodyElement = document.querySelector('body');\r\n        bodyElement.style.paddingRight = this.scrollWidth() + \"px\";\r\n        bodyElement.style.overflow = \"hidden\";\r\n        // Show the backdrop\r\n        if (backdrop) {\r\n            this.animation(bdrop, this.fadeInAnimation);\r\n        }\r\n        // Show the container\r\n        this.animation(container, this.fadeInAnimation);\r\n        // Show the modal\r\n        this.animation(selector, enter);\r\n        // Set animation exit on click\r\n        if (selector.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`)) {\r\n            selector.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`).onclick = () => {\r\n                // Hide the backdrop\r\n                if (backdrop) {\r\n                    this.animation(bdrop, this.fadeOutAnimation);\r\n                }\r\n                // Show the scrollbar\r\n                setTimeout(() => {\r\n                    bodyElement.style.paddingRight = \"\";\r\n                    bodyElement.style.overflow = \"\";\r\n                }, duration / 2);\r\n                // Hide the modal\r\n                this.animation(selector, exit).then(() => {\r\n                    // Hide the container\r\n                    this.animation(container, this.fadeOutAnimation);\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Hadnles the dragable items on drag\r\n     *\r\n     * @param {HTMLElement} sel -- The dragable selector\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    drag(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Animation promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            const draggables = Array.from(selector.children);\r\n            // Items\r\n            let counter = 1;\r\n            draggables.forEach((draggable) => {\r\n                // Check the data-order\r\n                if (!draggable.dataset.order) {\r\n                    draggable.dataset.order = counter;\r\n                }\r\n                // Drag start\r\n                draggable.ondragstart = (e) => {\r\n                    if (e.target === draggable) {\r\n                        draggable.classList.add(this.nameDrag + this.chiSep + this.nameDragging);\r\n                    }\r\n                };\r\n                // Drag enter\r\n                draggable.ondragenter = (e) => {\r\n                    if (e.target === draggable) {\r\n                        const dragging = selector.querySelector(`.${this.nameDrag + this.chiSep + this.nameDragging}`);\r\n                        if (draggable != dragging && dragging) {\r\n                            if (dragging.parentNode === draggable.parentNode) {\r\n                                const draggingOrder = dragging.dataset.order;\r\n                                const draggableOrder = draggable.dataset.order;\r\n                                // Swap orders\r\n                                dragging.dataset.order = draggableOrder;\r\n                                draggable.dataset.order = draggingOrder;\r\n                                // Swap items\r\n                                this.swap(dragging, draggable);\r\n                                // Swaping\r\n                                draggable.classList.add(this.nameDrag + this.chiSep + this.nameSwapping);\r\n                                dragging.classList.add(this.nameDrag + this.chiSep + this.nameSwapping);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                // Drag leave\r\n                draggable.ondragleave = (e) => {\r\n                    if (e.target === draggable) {\r\n                        const dragging = selector.querySelector(`.${this.nameDrag + this.chiSep + this.nameDragging}`);\r\n                        if (draggable != dragging && dragging) {\r\n                            if (dragging.parentNode === draggable.parentNode) {\r\n                                // Swaping\r\n                                draggable.classList.remove(this.nameDrag + this.chiSep + this.nameSwapping);\r\n                                dragging.classList.remove(this.nameDrag + this.chiSep + this.nameSwapping);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                // Drag over\r\n                draggable.ondragover = (e) => {\r\n                    const dragging = selector.querySelector(`.${this.nameDrag + this.chiSep + this.nameDragging}`);\r\n                    if (dragging) {\r\n                        if (dragging.parentNode === draggable.parentNode) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                };\r\n                // Drag end\r\n                draggable.ondragend = (e) => {\r\n                    if (e.target === draggable) {\r\n                        // Swaping\r\n                        const swaping = selector.querySelector(`.${this.nameDrag + this.modSep + this.nameSwapping}`);\r\n                        if (swaping)\r\n                            swaping.classList.remove(this.nameDrag + this.modSep + this.nameSwapping);\r\n                        const dragging = selector.querySelector(`.${this.nameDrag + this.chiSep + this.nameDragging}`);\r\n                        if (dragging)\r\n                            dragging.classList.remove(this.nameDrag + this.modSep + this.nameSwapping);\r\n                        draggable.classList.remove(this.nameDrag + this.chiSep + this.nameDragging);\r\n                    }\r\n                    // Promise on resolve\r\n                    resolve('Dragabble ended!');\r\n                    // Promise on reject\r\n                    reject('Dragabble crashed!');\r\n                };\r\n                // Increase counter\r\n                counter++;\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Handles closable message\r\n     *\r\n     * @param {HTMLElement} sel -- The message close selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    message(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Message on close\r\n        selector.onclick = () => {\r\n            let parent = selector.parentElement.parentElement;\r\n            this.animation(parent, this.hideYAnimation).then(() => {\r\n                parent.remove();\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * @desc Handles clickable popups\r\n     *\r\n     * @param {HTMLElement} sel -- The popup selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    popups(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Check clickable\r\n        if (selector.querySelector(`.${this.namePopup + this.modSep + this.nameClick}`)) {\r\n            selector.onclick = (i) => {\r\n                // Popup component\r\n                let popup = selector.querySelector(`.${this.namePopup + this.modSep + this.nameClick}`);\r\n                // Ignore the click for component and its children(:not(.popup--close))\r\n                let ignoreClick = false;\r\n                selector.querySelectorAll(`.${this.namePopup} *:not(.${this.namePopup + this.chiSep + this.nameClose})`).forEach((j) => {\r\n                    if (i.target == j) {\r\n                        ignoreClick = true;\r\n                    }\r\n                });\r\n                // Check ignore click\r\n                if (ignoreClick || i.target == popup)\r\n                    return;\r\n                // Remove open class (hide popup)\r\n                if (selector.querySelector(`.${this.namePopup + this.modSep + this.nameOpen}`)) {\r\n                    popup.classList.remove(`${this.namePopup + this.modSep + this.nameOpen}`);\r\n                }\r\n                // Add open class (show popup)\r\n                else {\r\n                    popup.classList.add(`${this.namePopup + this.modSep + this.nameOpen}`);\r\n                }\r\n                // Prevent default behavior\r\n                return false;\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Hadnles tabs\r\n     *\r\n     * @param {HTMLElement} sel -- The tab selector\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    tab(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Draggable promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            // Fetch elements\r\n            const links = selector.querySelectorAll(`.${this.nameTab + this.chiSep + this.nameTabLink}`);\r\n            let active = selector.querySelector(`.${this.nameTab + this.chiSep + this.nameActive}`);\r\n            let open = selector.querySelector(`.${this.nameTab + this.chiSep + this.nameOpen}`);\r\n            let dataTab;\r\n            // Handle click links\r\n            links.forEach((link) => {\r\n                link.onclick = () => {\r\n                    // Check current tab\r\n                    if (link !== active) {\r\n                        dataTab = link.dataset.tab;\r\n                        // Handle active\r\n                        if (active)\r\n                            active.classList.remove(`${this.nameTab + this.chiSep + this.nameActive}`);\r\n                        active = link;\r\n                        active.classList.add(`${this.nameTab + this.chiSep + this.nameActive}`);\r\n                        // Handle open\r\n                        if (open)\r\n                            open.classList.remove(`${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                        open = selector.querySelector(`.${this.nameTab + this.chiSep + this.nameTabContent}[data-tab=\"${dataTab}\"]`);\r\n                        if (open)\r\n                            open.classList.add(`${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                    // Promise on resolve\r\n                    resolve('Tab opened!');\r\n                    // Promise on reject\r\n                    reject('Tab crashed!');\r\n                };\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Hadnles tabs\r\n     *\r\n     * @param {HTMLElement} sel -- The accordion selector\r\n     *\r\n     * @return {void}\r\n     */\r\n    accord(sel) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Fetch elements\r\n        const unique = Boolean(selector.classList.contains(`${this.nameAccord + this.modSep + this.nameAccordUnique}`));\r\n        const links = selector.querySelectorAll(`.${this.nameAccord + this.chiSep + this.nameAccordLink}`);\r\n        let item, content, maxHeight;\r\n        // Handle links\r\n        links.forEach((link) => {\r\n            // Set items default max-height\r\n            item = link.parentElement;\r\n            content = link.nextElementSibling;\r\n            if (item.classList.contains(`${this.nameAccord + this.chiSep + this.nameActive}`)) {\r\n                maxHeight = content.scrollHeight + \"px\";\r\n                content.style.maxHeight = maxHeight;\r\n            }\r\n            else {\r\n                content.style.maxHeight = \"0\";\r\n            }\r\n            // Handle links on click\r\n            link.onclick = () => {\r\n                item = link.parentElement;\r\n                content = link.nextElementSibling;\r\n                maxHeight = content.scrollHeight + \"px\";\r\n                // Set item max-height\r\n                if (item.classList.contains(`${this.nameAccord + this.chiSep + this.nameActive}`)) {\r\n                    content.style.maxHeight = \"0\";\r\n                }\r\n                else {\r\n                    content.style.maxHeight = maxHeight;\r\n                }\r\n                // Toggle active class\r\n                item.classList.toggle(`${this.nameAccord + this.chiSep + this.nameActive}`);\r\n                // Check unique\r\n                if (unique) {\r\n                    const actives = selector.querySelectorAll(`.${this.nameAccord + this.chiSep + this.nameActive}`);\r\n                    actives.forEach((active) => {\r\n                        // Inactive the active items (except for the current item)\r\n                        if (active !== item) {\r\n                            active.classList.remove(`${this.nameAccord + this.chiSep + this.nameActive}`);\r\n                            active.querySelector(`.${this.nameAccord + this.chiSep + this.nameAccordLink}`).nextElementSibling.style.maxHeight = \"0\";\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * @desc Hadnles tabs\r\n     *\r\n     * @param {HTMLElement} sel -- The counter selector\r\n     * @param {function}    cf  -- The callback function for the last count\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    counter(sel, cf = () => { }) {\r\n        // Check the selector\r\n        const selector = this.query(sel);\r\n        // Check the counting\r\n        if (selector.classList.contains(`${this.nameCounter + this.modSep + this.nameCounterCounting}`))\r\n            return false;\r\n        // Fetch datasets\r\n        const start = Number(selector.dataset.start);\r\n        const stop = Number(selector.dataset.stop);\r\n        const step = Number(selector.dataset.step);\r\n        const count = Math.abs(stop - start) / step;\r\n        const delay = Number(selector.dataset.delay);\r\n        const speed = Number(selector.dataset.speed);\r\n        // Start counting\r\n        let ii = start;\r\n        this.loop(() => {\r\n            // Set the counting\r\n            if (ii == start) {\r\n                selector.classList.add(`${this.nameCounter + this.modSep + this.nameCounterCounting}`);\r\n            }\r\n            // Unset the counting\r\n            else if (ii == stop) {\r\n                selector.classList.remove(`${this.nameCounter + this.modSep + this.nameCounterCounting}`);\r\n            }\r\n            // Set the counter\r\n            selector.innerHTML = ii;\r\n            // Set the stepper\r\n            (stop > start) ? ii += step : ii -= step;\r\n        }, speed, delay, count, cf);\r\n    }\r\n}\r\n//# sourceMappingURL=Components.js.map","/**\r\n * @desc Used for the configuration of Polaris JS library\r\n */\r\nexport class Config {\r\n    constructor() {\r\n        this.modSep = \"-\"; // Modifier Separator\r\n        this.chiSep = \"--\"; // Child Separator\r\n        this.sibSep = \"_\"; // Sibling Separator\r\n        this.parSep = \"__\"; // Parent Separator\r\n        this.nameDoc = \"doc\"; // Name key for document component\r\n        this.nameLight = \"light\"; // Name key for light color\r\n        this.nameDark = \"dark\"; // Name key for dark color\r\n        this.nameBlueprint = \"blueprint\"; // Name key for component's blueprint\r\n        this.nameContainer = \"container\"; // Name key for container\r\n        this.nameControl = \"control\"; // Name key for control\r\n        this.nameIcon = \"icon\"; // Name key for icon\r\n        this.nameContent = \"content\"; // Name key for content\r\n        this.nameClose = \"close\"; // Name key for close\r\n        this.nameClick = \"click\"; // Name key for click\r\n        this.nameActive = \"active\"; // Name key for active\r\n        this.nameVoid = \"void\"; // Name key for void\r\n        this.nameOpen = \"open\"; // Name key for open inffix\r\n        this.nameHeader = \"header\"; // Name key for header\r\n        this.nameBody = \"body\"; // Name key for body\r\n        this.nameFooter = \"footer\"; // Name key for footer\r\n        this.nameWidth = \"w\"; // Name key for css width classes\r\n        this.nameHeight = \"h\"; // Name key for css height classes\r\n        this.nameRadius = \"round\"; // Name key for border-radius & component roundness\r\n        this.namePosition = \"position\"; // Name key for position classes\r\n        this.nameAnimation = \"animation\"; // Name key for animation component\r\n        this.nameAnimated = \"animated\"; // Name key for animation-animated\r\n        this.nameRipple = \"ripple\"; // Name key for ripple component\r\n        this.nameRange = \"range\"; // Name key for range\r\n        this.nameChip = \"chip\"; // Name key for chip\r\n        this.nameChipItems = \"items\"; // 2nd name key for chip--items\r\n        this.nameChipItem = \"item\"; // 2nd name key for chip--item\r\n        this.nameChipText = \"text\"; // 2nd name key for chip--text\r\n        this.nameChipClose = \"close\"; // 2nd name key for chip--close\r\n        this.nameChipInput = \"input\"; // 2nd name key for chip--input\r\n        this.nameChipOutput = \"output\"; // 2nd name key for chip--output\r\n        this.nameAuto = \"auto\"; // Name key for auto\r\n        this.nameAutoInput = \"input\"; // 2nd name key for auto--input\r\n        this.nameAutoOutput = \"output\"; // 2nd name key for auto--output\r\n        this.nameAutoOpen = \"open\"; // 2nd name key for auto--open\r\n        this.nameAlert = \"alert\"; // Name key for alert component\r\n        this.nameMessages = \"msg\"; // Name key for msg component\r\n        this.nameBackdrop = \"backdrop\"; // Name key for backdrop component\r\n        this.namePopup = \"popup\"; // Name key for popup component\r\n        this.nameMenu = \"menu\"; // Name key for menu component\r\n        this.nameModal = \"modal\"; // Name key for modal component\r\n        this.nameDrag = \"drag\"; // Name key for drag\r\n        this.nameDragging = \"dragging\"; // 2nd name key for drag--dragging\r\n        this.nameSwapping = \"swapping\"; // 2nd name key for drag--swapping\r\n        this.nameDragAuto = \"auto\"; // 2nd name key for drag-auto\r\n        this.nameTab = \"tab\"; // Name key for tab\r\n        this.nameTabAuto = \"auto\"; // 2nd name key for tab-auto\r\n        this.nameTabLink = \"link\"; // 2nd name key for tab--link\r\n        this.nameTabContent = \"content\"; // 2nd name key for tab--content\r\n        this.nameAccord = \"accord\"; // Name key for accordion\r\n        this.nameAccordUnique = \"unique\"; // 2nd name key for accord-unique\r\n        this.nameAccordLink = \"link\"; // 2nd name key for accord--link\r\n        this.nameCounter = \"counter\"; // Name key for counter\r\n        this.nameCounterAuto = \"auto\"; // 2nd name key for counter-auto\r\n        this.nameCounterCounting = \"counting\"; // 2nd name key for counter-counting\r\n        this.piAlertCircle = \"pi-alert-circle\"; // Polaris Icon: alert-circle\r\n        this.piAlertTri = \"pi-alert-triangle\"; // Polaris Icon: alert-triangle\r\n        this.piAlertTick = \"pi-alert-tick\"; // Polaris Icon: alert-tick\r\n        this.piClose = \"pi-close\"; // Polaris Icon: close\r\n        this.fadeInAnimation = \"fadeIn\"; // fadeIn animation\r\n        this.fadeOutAnimation = \"fadeOut\"; // fadeOut animation\r\n        this.hideYAnimation = \"hideY\"; // hideY animation\r\n        this.rippleAnimation = \"ripple\"; // ripple animation\r\n        this.rippleAutoAnimation = \"rippleAuto\"; // rippleAuto animation\r\n        this.hideTimeout = 8000; // Default hide timeout (in miliseconds)\r\n        this.alertPosition = \"bottom\"; // Alert default position\r\n        this.polarisSizes = ['xs', 'sm', 'md', 'lg', 'xl']; // Polaris standard sizes\r\n        this.phoneWidth = 0; // Smartphone min-width\r\n        this.tabletWidth = 768; // Tablet min-width\r\n        this.desktopWidth = 1280; // Desktop min-width\r\n        this.rangeWidthXS = 1; // XS range slider thumb width (rem)\r\n        this.rangeWidthSM = 1.25; // SM range slider thumb width (rem)\r\n        this.rangeWidthMD = 1.5; // MD range slider thumb width (rem)\r\n        this.rangeWidthLG = 1.75; // LG range slider thumb width (rem)\r\n        this.rangeWidthXL = 2; // XL range slider thumb width (rem)\r\n        this.hasBackdropBlueprint = true; // Backdrop blueprint status\r\n        this.hasAlertBlueprint = true; // Alert blueprint status\r\n        this.hasModalBlueprint = true; // Modal blueprint status\r\n        this.hasDocDefaults = true; // Document default classes status\r\n        this.hasLinkDefaults = true; // Void links defaults status\r\n        this.hasRippleDefaults = true; // Ripple default animations status\r\n        this.hasAnimationDefaults = true; // Animation default datasets status\r\n        this.hasRangeDefaults = true; // Range slider default status\r\n        this.hasChipDefaults = true; // Chips default status\r\n        this.hasAutoDefaults = true; // Autocomplete default status\r\n        this.hasMessageDefaults = true; // Closable messages defaults status\r\n        this.hasPopupDefaults = true; // Clickable & animated popups defaults status\r\n        this.hasMenuDefaults = true; // Clickable & animated menus defaults status\r\n        this.hasDragDefaults = true; // Auto drag items status\r\n        this.hasTabDefaults = true; // Tabs defaults status\r\n        this.hasAccordDefaults = true; // Accordions defaults status\r\n        this.hasCounterDefaults = true; // Counters defaults status\r\n    }\r\n}\r\n//# sourceMappingURL=Config.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Defaults } from \"./Defaults\";\r\n/**\r\n * @desc Used for method chaining & initializing defaults & loading Blueprints\r\n */\r\nexport class Core extends Defaults {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor(node = null, mode = null) {\r\n        // Inherit the parent class\r\n        super();\r\n        // Initialize properties\r\n        this.node = node;\r\n        this.mode = mode;\r\n        // Check the selector\r\n        if (node && typeof (node) === \"string\") {\r\n            // Array node\r\n            if (mode === \"all\") {\r\n                this.node = document.querySelectorAll(node);\r\n            }\r\n            // Single node\r\n            else {\r\n                this.node = document.querySelector(node);\r\n            }\r\n            // Chain the node\r\n            this.chain();\r\n            return this;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Used for method chaining\r\n     *\r\n     * @return {any}\r\n     */\r\n    chain() {\r\n        return this.node;\r\n    }\r\n    /**\r\n     * @desc addEventListener shorthand\r\n     *\r\n     * @param {string}   e  -- The event name\r\n     * @param {function} fn -- The callback function\r\n     *\r\n     * @return {Object}\r\n     */\r\n    event(e, fn) {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            this.node = this.node.addEventListener(e, () => fn());\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"event()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * @desc innerHTML simplified\r\n     *\r\n     * @param {string} content - The optional content\r\n     *\r\n     * @return {void | object}\r\n     */\r\n    html(content = \"\") {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            if (content) {\r\n                this.node.innerHTML = content;\r\n            }\r\n            else {\r\n                this.node = this.node.innerHTML;\r\n            }\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"html()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * @desc The objects length\r\n     *\r\n     * @return {number}\r\n     */\r\n    length() {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            this.node = this.node.length;\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"length()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * Initializes the Polaris class\r\n     *\r\n     * @return {void}\r\n     */\r\n    init() {\r\n        /**\r\n         *  Load Blueprints\r\n         */\r\n        /**\r\n         *  Backdrop blueprint\r\n         */\r\n        if (this.hasBackdropBlueprint)\r\n            this.backdropBlueprint();\r\n        /**\r\n         *  Alert blueprint\r\n         */\r\n        if (this.hasAlertBlueprint)\r\n            this.alertBlueprint();\r\n        /**\r\n         *  Modal blueprint\r\n         */\r\n        if (this.hasModalBlueprint)\r\n            this.modalBlueprint();\r\n        /**\r\n         *  Load Defaults\r\n         */\r\n        /**\r\n         *  Document default classes\r\n         */\r\n        if (this.hasDocDefaults)\r\n            this.docDefaults();\r\n        /**\r\n         *  Void links defaults\r\n         */\r\n        if (this.hasLinkDefaults)\r\n            this.linkDefaults();\r\n        /**\r\n         *  Ripple default animations\r\n         */\r\n        if (this.hasRippleDefaults)\r\n            this.rippleDefaults();\r\n        /**\r\n         *  Animation default datasets\r\n         */\r\n        if (this.hasAnimationDefaults)\r\n            this.animationDefaults();\r\n        /**\r\n         *  Range slider defaults\r\n         */\r\n        if (this.hasRangeDefaults)\r\n            this.rangeDefaults();\r\n        /**\r\n         *  Chips defaults\r\n         */\r\n        if (this.hasChipDefaults)\r\n            this.chipDefaults();\r\n        /**\r\n         *  Autocomplete defaults\r\n         */\r\n        if (this.hasAutoDefaults)\r\n            this.autoDefaults();\r\n        /**\r\n         *  Closable messages defaults\r\n         */\r\n        if (this.hasMessageDefaults)\r\n            this.messageDefaults();\r\n        /**\r\n         *  Clickable & animated popups defaults\r\n         */\r\n        if (this.hasPopupDefaults)\r\n            this.popupDefaults();\r\n        /**\r\n         *  Clickable & animated menus defaults\r\n         */\r\n        if (this.hasMenuDefaults)\r\n            this.menuDefaults();\r\n        /**\r\n         *  Auto draggable items\r\n         */\r\n        if (this.hasDragDefaults)\r\n            this.dragDefaults();\r\n        /**\r\n         *  Tabs defaults\r\n         */\r\n        if (this.hasTabDefaults)\r\n            this.tabDefaults();\r\n        /**\r\n         *  Accordions defaults\r\n         */\r\n        if (this.hasAccordDefaults)\r\n            this.accordDefaults();\r\n        /**\r\n         *  Counters defaults\r\n         */\r\n        if (this.hasCounterDefaults)\r\n            this.counterDefaults();\r\n    }\r\n}\r\n//# sourceMappingURL=Core.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Blueprints } from \"./Blueprints\";\r\n/**\r\n * @desc Used for handling components default behaviors\r\n */\r\nexport class Defaults extends Blueprints {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Document default classes\r\n     *\r\n     * @return {void}\r\n     */\r\n    docDefaults() {\r\n        let doc = document.querySelector('body');\r\n        // Check the document class \r\n        if (!doc.classList.contains(`${this.nameDoc}`)) {\r\n            doc.classList.add(`${this.nameDoc}`);\r\n        }\r\n        // Check the document color\r\n        if (!doc.classList.contains(`${this.nameDoc + this.modSep + this.nameLight}`) &&\r\n            !doc.classList.contains(`${this.nameDoc + this.modSep + this.nameDark}`)) {\r\n            // Color scheme\r\n            let scheme;\r\n            // Dark mode\r\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n                scheme = this.nameDark;\r\n            }\r\n            // Light mode\r\n            else {\r\n                scheme = this.nameLight;\r\n            }\r\n            // Set color scheme\r\n            doc.classList.add(`${this.nameDoc + this.modSep + scheme}`);\r\n            // Watch for changes\r\n            window.matchMedia('(prefers-color-scheme: dark)').onchange = (event => {\r\n                // Remove old scheme\r\n                this.removeClass(`.${this.nameDoc}`, `${this.nameDoc + this.modSep + scheme}`);\r\n                // Find new scheme\r\n                scheme = event.matches ? this.nameDark : this.nameLight;\r\n                // Set new color scheme\r\n                doc.classList.add(`${this.nameDoc + this.modSep + scheme}`);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles void links\r\n     *\r\n     * @return {void}\r\n     */\r\n    linkDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameVoid}`).length) {\r\n            document.querySelectorAll(`.${this.nameVoid}`).forEach((elem) => {\r\n                // Check element href\r\n                if (elem.getAttribute('href') === \"#\") {\r\n                    elem.setAttribute('href', 'javascript:void(0)');\r\n                }\r\n                // Alternatively prevent default behavior\r\n                // elem.onclick = () => {\r\n                //     return false;\r\n                // };\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets ripple animations if any available\r\n     *\r\n     * @return {void}\r\n     */\r\n    rippleDefaults() {\r\n        /**\r\n         *  Ripple animations\r\n         */\r\n        if (document.querySelectorAll(`.${this.nameRipple}`).length) {\r\n            // ripple\r\n            document.querySelectorAll(`.${this.nameRipple}[data-animation=${this.rippleAnimation}]`).forEach((elem) => {\r\n                elem.onclick = (event) => {\r\n                    let x = event.clientX, y = event.clientY;\r\n                    const REC = elem.getBoundingClientRect(), DIM = Math.sqrt(Math.pow(REC.width, 2) + Math.pow(REC.height, 2));\r\n                    // Unset the previous ripple animation\r\n                    elem.removeAttribute('data-animation');\r\n                    elem.offsetTop;\r\n                    // Set the new ripple animation\r\n                    elem.setAttribute('data-animation', this.rippleAnimation);\r\n                    elem.style.setProperty('--animation-dimension', DIM + 'px');\r\n                    elem.style.setProperty('--animation-left', x - REC.left + 'px');\r\n                    elem.style.setProperty('--animation-top', y - REC.top + 'px');\r\n                    // Set datasets and variables\r\n                    this.datasets(elem);\r\n                };\r\n            });\r\n            // rippleAuto\r\n            document.querySelectorAll(`.${this.nameRipple}[data-animation=${this.rippleAutoAnimation}]`).forEach((elem) => {\r\n                // Set datasets and variables\r\n                this.datasets(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles animation datasets if any available\r\n     *\r\n     * @return {void}\r\n     */\r\n    animationDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameAnimation}`).length) {\r\n            document.querySelectorAll(`.${this.nameAnimation}`).forEach((elem) => {\r\n                // Set CSS properties and variables\r\n                this.datasets(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles range sliders automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    rangeDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameRange}`).length) {\r\n            document.querySelectorAll(`.${this.nameRange}`).forEach((elem) => {\r\n                // Handle range on load & input\r\n                this.range(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles chips automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    chipDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameChip}`).length) {\r\n            document.querySelectorAll(`.${this.nameChip}`).forEach((elem) => {\r\n                // Handle chips on load & enter & remove\r\n                this.chip(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles autocomplete automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    autoDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameAuto}`).length) {\r\n            document.querySelectorAll(`.${this.nameAuto}`).forEach((elem) => {\r\n                // Handle autocomplete on load & input\r\n                this.auto(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles closable messages\r\n     *\r\n     * @return {void}\r\n     */\r\n    messageDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameMessages + this.chiSep + this.nameClose}`).length) {\r\n            document.querySelectorAll(`.${this.nameMessages + this.chiSep + this.nameClose}`).forEach((elem) => {\r\n                this.message(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles clickable popups\r\n     *\r\n     * @return {void}\r\n     */\r\n    popupDefaults() {\r\n        if (document.querySelectorAll(`.${this.namePopup + this.parSep + this.nameControl}`).length) {\r\n            document.querySelectorAll(`.${this.namePopup + this.parSep + this.nameControl}`).forEach((elem) => {\r\n                this.popups(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles clickable and hoverable animated menu\r\n     *\r\n     * @return {void}\r\n     */\r\n    menuDefaults() {\r\n        // Clickable submenu\r\n        if (document.querySelectorAll(`.${this.nameMenu + this.chiSep + this.nameClick}`).length) {\r\n            document.querySelectorAll(`.${this.nameMenu + this.chiSep + this.nameClick}`).forEach((elem) => {\r\n                elem.querySelector(`.${this.nameMenu + this.chiSep + this.nameClick} a`).onclick = () => {\r\n                    // Submenu\r\n                    let submenu = elem.querySelector(`.${this.nameMenu + this.chiSep + this.nameClick} ul`);\r\n                    // Check animated submenu\r\n                    if (submenu.classList.contains(`${this.nameAnimation}`)) {\r\n                        let animationIn, animationOut;\r\n                        // Menu is open\r\n                        if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                            animationIn = \"fadeOut\";\r\n                            animationOut = \"fadeIn\";\r\n                            // Check data-exit\r\n                            if (submenu.getAttribute(\"data-exit\"))\r\n                                animationIn = submenu.getAttribute(\"data-exit\");\r\n                            // Check data-enter\r\n                            if (submenu.getAttribute(\"data-enter\"))\r\n                                animationOut = submenu.getAttribute(\"data-enter\");\r\n                        }\r\n                        // Menu is closed\r\n                        else {\r\n                            animationIn = \"fadeIn\";\r\n                            animationOut = \"fadeOut\";\r\n                            // Check data-enter\r\n                            if (submenu.getAttribute(\"data-enter\"))\r\n                                animationIn = submenu.getAttribute(\"data-enter\");\r\n                            // Check data-exit\r\n                            if (submenu.getAttribute(\"data-exit\"))\r\n                                animationOut = submenu.getAttribute(\"data-exit\");\r\n                        }\r\n                        // Check data-animation\r\n                        if (this.getStyle(submenu, 'animation-name') !== 'none') {\r\n                            if (this.getStyle(submenu, 'animation-name') == animationIn) {\r\n                                this.animation(submenu, animationOut);\r\n                            }\r\n                            else if (this.getStyle(submenu, 'animation-name') == animationOut) {\r\n                                this.animation(submenu, animationIn);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.animation(submenu, animationIn);\r\n                        }\r\n                    }\r\n                    // Remove open class (hide menu)\r\n                    else if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                        submenu.classList.remove(`${this.nameMenu + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                    // Add open class (show menu)\r\n                    else {\r\n                        submenu.classList.add(`${this.nameMenu + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                    // Prevent default behavior\r\n                    return false;\r\n                };\r\n            });\r\n        }\r\n        // Hoverable animated submenu\r\n        if (document.querySelectorAll(`.${this.nameMenu} li:not(.${this.nameMenu + this.chiSep + this.nameClick})`).length) {\r\n            document.querySelectorAll(`.${this.nameMenu} li:not(.${this.nameMenu + this.chiSep + this.nameClick})`).forEach((elem) => {\r\n                // Submenu\r\n                let submenu = elem.querySelector(`.${this.nameMenu} li ul.${this.nameAnimation}`);\r\n                if (submenu) {\r\n                    let animationIn, animationOut;\r\n                    // Menu is open\r\n                    if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                        animationIn = \"fadeOut\";\r\n                        animationOut = \"fadeIn\";\r\n                        // Check data-exit\r\n                        if (submenu.getAttribute(\"data-exit\"))\r\n                            animationIn = submenu.getAttribute(\"data-exit\");\r\n                        // Check data-enter\r\n                        if (submenu.getAttribute(\"data-enter\"))\r\n                            animationOut = submenu.getAttribute(\"data-enter\");\r\n                    }\r\n                    // Menu is closed\r\n                    else {\r\n                        animationIn = \"fadeIn\";\r\n                        animationOut = \"fadeOut\";\r\n                        // Check data-enter\r\n                        if (submenu.getAttribute(\"data-enter\"))\r\n                            animationIn = submenu.getAttribute(\"data-enter\");\r\n                        // Check data-exit\r\n                        if (submenu.getAttribute(\"data-exit\"))\r\n                            animationOut = submenu.getAttribute(\"data-exit\");\r\n                    }\r\n                    // Mouse over\r\n                    elem.onmouseover = () => {\r\n                        // Show submenu\r\n                        this.animation(submenu, animationIn).then();\r\n                    };\r\n                    // Mouse out\r\n                    elem.onmouseout = () => {\r\n                        // Hide submenu\r\n                        this.animation(submenu, animationOut);\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles auto draggable items\r\n     *\r\n     * @return {void}\r\n     */\r\n    dragDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameDrag + this.modSep + this.nameDragAuto}`).length) {\r\n            document.querySelectorAll(`.${this.nameDrag + this.modSep + this.nameDragAuto}`).forEach((elem) => {\r\n                // Set CSS properties and variables\r\n                this.drag(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles tabs automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    tabDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameTab + this.modSep + this.nameTabAuto}`).length) {\r\n            document.querySelectorAll(`.${this.nameTab + this.modSep + this.nameTabAuto}`).forEach((elem) => {\r\n                // Fetch elements\r\n                let active = elem.querySelector(`.${this.nameTab + this.chiSep + this.nameActive}`);\r\n                let open = elem.querySelector(`.${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                let dataTab;\r\n                let hash;\r\n                // Handle open content\r\n                if (active && !open) {\r\n                    dataTab = active.dataset.tab;\r\n                    open = elem.querySelector(`.${this.nameTab + this.chiSep + this.nameTabContent}[data-tab=\"${dataTab}\"]`);\r\n                    if (open)\r\n                        open.classList.add(`${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                }\r\n                // Handle URL hash\r\n                hash = this.hash();\r\n                if (hash) {\r\n                    hash = this.replace(hash, \"#\", \"\");\r\n                    if (hash) {\r\n                        if (active && active.dataset.tab !== hash)\r\n                            active.classList.remove(`${this.nameTab + this.chiSep + this.nameActive}`);\r\n                        active = elem.querySelector(`.${this.nameTab + this.chiSep + this.nameTabLink}[data-tab=\"${hash}\"]`);\r\n                        if (active)\r\n                            active.classList.add(`${this.nameTab + this.chiSep + this.nameActive}`);\r\n                        if (open && open.dataset.tab !== hash)\r\n                            open.classList.remove(`${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                        open = elem.querySelector(`.${this.nameTab + this.chiSep + this.nameTabContent}[data-tab=\"${hash}\"]`);\r\n                        if (open)\r\n                            open.classList.add(`${this.nameTab + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                }\r\n                // Handle tab links click\r\n                this.tab(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles accordions automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    accordDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameAccord}`).length) {\r\n            document.querySelectorAll(`.${this.nameAccord}`).forEach((elem) => {\r\n                // Handle accordion links click\r\n                this.accord(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles counters automatically\r\n     *\r\n     * @return {void}\r\n     */\r\n    counterDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameCounter + this.modSep + this.nameCounterAuto}`).length) {\r\n            document.querySelectorAll(`.${this.nameCounter + this.modSep + this.nameCounterAuto}`).forEach((elem) => {\r\n                // Handle counter on load\r\n                this.counter(elem);\r\n            });\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Defaults.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Config } from \"./Config\";\r\n/**\r\n * @desc Polaris JS helper methods\r\n */\r\nexport class Helpers extends Config {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n        /**\r\n         * @desc For removeing character(s) in a string before some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string | undefined}\r\n         */\r\n        this.removeBefore = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find).pop();\r\n            }\r\n            else {\r\n                return find + str.split(find).pop();\r\n            }\r\n        };\r\n        /**\r\n         * @desc For removeing character(s) in a string after some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string}\r\n         */\r\n        this.removeAfter = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find)[0];\r\n            }\r\n            else {\r\n                return str.split(find)[0] + find;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Checks a selector for type & existence\r\n     *\r\n     * @param {string | HTMLElement} selector -- The selector name (object)\r\n     *\r\n     * @return {object}\r\n     */\r\n    exist(selector = null) {\r\n        // Default variables\r\n        let result = {};\r\n        // Set the default result response\r\n        result = {\r\n            status: true,\r\n            message: `Passed!`\r\n        };\r\n        // Empty or null selector\r\n        if (!selector) {\r\n            result = {\r\n                status: false,\r\n                message: `The \"selector\" parameter cannot be empty or null.`\r\n            };\r\n        }\r\n        // String type\r\n        else if (typeof (selector) === \"string\") {\r\n            if (document.querySelectorAll(selector).length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector \"${selector}\" not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Object type\r\n        else if (typeof (selector) === \"object\") {\r\n            if (selector.length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector object not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Return the result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Returns the equivalent HTMLElement of a selector\r\n     *\r\n     * @param {string | HTMLElement} selector -- The selector name (object)\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    query(selector = null) {\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                return document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                return selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Produces the querySelector object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selector(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelector(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Produces the querySelectorAll object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selectors(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Checks if an element is visible on the screen\r\n     *\r\n     * @param {string | object} selector  -- The selector name (object)\r\n     * @param {string}          from      -- Visible from (top, bottom, or both)\r\n     * @param {number}          tolerance -- The scroll tolerance\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    visible(selector, from = 'both', tolerance = 0) {\r\n        let result = false;\r\n        let rect = null;\r\n        let windowHeight = window.innerHeight;\r\n        let viewHeight = Math.max(document.documentElement.clientHeight, windowHeight);\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                rect = document.querySelector(selector);\r\n                rect = rect.getBoundingClientRect();\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                rect = selector.getBoundingClientRect();\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Scroll top & bottom\r\n        if (from == 'both') {\r\n            result = rect.bottom >= tolerance && rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll top\r\n        else if (from == 'top') {\r\n            result = rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll bottom\r\n        else if (from == 'bottom') {\r\n            result = rect.bottom >= tolerance;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Prepends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content | value\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    prepend(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Prepend the node\r\n        try {\r\n            node.innerHTML = content;\r\n        }\r\n        catch (error) {\r\n            node.value = content;\r\n        }\r\n        parentNode.insertBefore(node, parentNode.firstChild);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Appends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content | value\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    append(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Append the node\r\n        try {\r\n            node.innerHTML = content;\r\n        }\r\n        catch (error) {\r\n            node.value = content;\r\n        }\r\n        parentNode.appendChild(node);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Removes an HTML element from the DOM\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    remove(selector) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the node\r\n        node.remove();\r\n    }\r\n    /**\r\n     * @desc For writing the whole document\r\n     *\r\n     * @param {string} content -- The document content\r\n     *\r\n     * @return {void}\r\n     */\r\n    write(content = \"\") {\r\n        javascript: document.open('text/html');\r\n        document.write(content);\r\n        document.close();\r\n    }\r\n    /**\r\n     * @desc Loops a function for a couple of times\r\n     *\r\n     * @param {function} fn    -- The function that needed to be looped\r\n     * @param {number}   speed -- The time speed for each iteration\r\n     * @param {number}   delay -- The time delay for loop\r\n     * @param {number}   count -- The loop count\r\n     * @param {function} cf    -- The callback function for the last loop\r\n     *\r\n     * @return {void}\r\n     */\r\n    loop(fn, speed = 1000, delay = 0, count = Infinity, cf = () => { }) {\r\n        setTimeout(() => {\r\n            // Function initial invoke\r\n            fn();\r\n            // Start looping\r\n            let i = 0;\r\n            let interval = setInterval(() => {\r\n                // Last loop\r\n                if (i == count || count <= 0) {\r\n                    // Terminate the loop\r\n                    return false;\r\n                }\r\n                // One before the last loop\r\n                if (i == count - 1) {\r\n                    // Invoke callback\r\n                    cf();\r\n                    // Clear the interval\r\n                    clearInterval(interval);\r\n                }\r\n                // Invoke the function\r\n                fn();\r\n                i++;\r\n            }, speed);\r\n        }, delay);\r\n    }\r\n    /**\r\n     * @desc Excecutes a function after document fully loaded\r\n     *\r\n     * @param {function} fn -- The callback function\r\n     *\r\n     * @return {void}\r\n     */\r\n    loaded(fn) {\r\n        return document.addEventListener('DOMContentLoaded', () => {\r\n            fn();\r\n        });\r\n    }\r\n    /**\r\n     * @desc For escaping Regular Expression search characters\r\n     *\r\n     * @param {string} str -- The string to format\r\n     *\r\n     * @return {string}\r\n     */\r\n    escape(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n    }\r\n    /**\r\n     * @desc For replacing character(s) in a string\r\n     *\r\n     * @param {string} str     -- The string to format\r\n     * @param {string} find    -- The character(s) to find\r\n     * @param {string} replace -- The character(s) to replace\r\n     *\r\n     * @return {string}\r\n     */\r\n    replace(str, find, replace) {\r\n        return str.replace(new RegExp(this.escape(find), 'g'), replace);\r\n    }\r\n    /**\r\n     * @desc For redirecting http URLs\r\n     *\r\n     * @param {string} url -- The URL to redirect\r\n     *\r\n     * @return {void}\r\n     */\r\n    redirect(url = \"/\") {\r\n        window.location.href = url;\r\n    }\r\n    /**\r\n     * @desc Finds page relative href\r\n     *\r\n     * @return {string}\r\n     */\r\n    href() {\r\n        return this.replace(window.location.href, window.location.origin, \"\");\r\n    }\r\n    /**\r\n     * @desc Finds URL hash\r\n     *\r\n     * @return {string}\r\n     */\r\n    hash() {\r\n        return window.location.hash;\r\n    }\r\n    /**\r\n     * @desc Calculates the scrollbar width\r\n     *\r\n     * @return {number}\r\n     */\r\n    scrollWidth() {\r\n        return window.innerWidth - document.documentElement.clientWidth;\r\n    }\r\n    /**\r\n     * @desc Checks a file for existence\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    fileExist(file) {\r\n        // Create a new XML HTTP Request\r\n        let xhr = new XMLHttpRequest();\r\n        // Request the file\r\n        xhr.open('HEAD', file, false);\r\n        xhr.send();\r\n        // File not found\r\n        if (xhr.status == \"404\") {\r\n            return false;\r\n        }\r\n        // File found\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in JSON format\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    json(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in plain text\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    text(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.text())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Creates a promise to copy a text to clipboard and returns the result\r\n     *\r\n     * @param {string} text -- The text to copy\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    copy(text) {\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let result = null;\r\n            navigator.clipboard.writeText(text)\r\n                .then(() => result = true, err => {\r\n                console.error('Copy Error: ', err);\r\n                result = false;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(result);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Adds a class to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string} cls             -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Add the class\r\n        if (!node.classList.contains(cls)) {\r\n            node.classList.add(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Removes a class to a selector\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string} cls               -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    removeClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the class\r\n        if (node.classList.contains(cls)) {\r\n            node.classList.remove(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Toggles an old class with a new class for a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string}        oldCls   -- The old class name\r\n     * @param {string}        newCls   -- The new class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    toggleClass(selector, oldCls, newCls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the old class\r\n        if (node.classList.contains(oldCls)) {\r\n            node.classList.remove(oldCls);\r\n        }\r\n        // Add the new class\r\n        if (!node.classList.contains(newCls)) {\r\n            node.classList.add(newCls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Adds a class list(array) to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string[]} classList     -- The class list (array)\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClasses(selector, classList) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Loop classes\r\n        classList.forEach((cls) => {\r\n            // Add the class\r\n            if (!node.classList.contains(cls)) {\r\n                node.classList.add(cls);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into uppercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    upper(text) {\r\n        return text.toLocaleUpperCase();\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into lowercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    lower(text) {\r\n        return text.toLocaleLowerCase();\r\n    }\r\n    /**\r\n     * @desc Returns the computed style for an element\r\n     *\r\n     * @param {string | HTMLElement} selector -- The node seclector\r\n     *\r\n     * @return {string}\r\n     */\r\n    getStyle(selector, property) {\r\n        let node, result;\r\n        // String type\r\n        if (typeof (selector) == \"string\") {\r\n            node = document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            node = selector;\r\n        }\r\n        // Property exists\r\n        const view = (node.ownerDocument || document).defaultView;\r\n        if (view && view.getComputedStyle) {\r\n            result = view.getComputedStyle(node, null).getPropertyValue(property);\r\n        }\r\n        // Property not exists\r\n        else {\r\n            result == undefined;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Checks if the browser is fullscreen\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isFullscreen() {\r\n        if (window.innerWidth == screen.width && window.innerHeight == screen.height) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Request an element to be fullscreen\r\n     *\r\n     * @var {any} method -- The request method\r\n     *\r\n     * @return {void}\r\n     */\r\n    fullscreen(elem) {\r\n        if (!this.isFullscreen()) {\r\n            const method = elem.requestFullScreen || elem.webkitRequestFullScreen || elem.mozRequestFullScreen || elem.msRequestFullScreen;\r\n            return method.call(elem);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Exits browser fullscreen\r\n     *\r\n     * @var {any} elem -- The document object\r\n     *\r\n     * @return {void}\r\n     */\r\n    exitFullscreen() {\r\n        const elem = document;\r\n        if (this.isFullscreen()) {\r\n            return elem.exitFullscreen() || elem.webkitExitFullscreen() || elem.mozCancelFullScreen() || elem.msExitFullscreen();\r\n        }\r\n    }\r\n    /**\r\n     * @desc Calls a function on class change for an elemnent\r\n     *\r\n     * @param {any}      elem -- The element to listen\r\n     * @param {Function} fn   -- The callback function\r\n     *\r\n     * @var {object} listener -- The event listener\r\n     *\r\n     * @return {void}\r\n     */\r\n    onClassChange(elem, fn) {\r\n        const listener = new MutationObserver((mutations) => {\r\n            mutations.forEach((mutation) => {\r\n                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\r\n                    fn(mutation.target);\r\n                }\r\n            });\r\n        });\r\n        listener.observe(elem, { attributes: true });\r\n        return listener.disconnect;\r\n    }\r\n    /**\r\n     * @desc For swaping two nodes from the same flow\r\n     *\r\n     * @param {HTMLElement} nodeA -- The first node\r\n     * @param {HTMLElement} nodeB -- The second node\r\n     *\r\n     * @var {HTMLElement} siblingA -- The sibling of first node\r\n     *\r\n     * @return {void}\r\n     */\r\n    swap(nodeA, nodeB) {\r\n        // Find the next sibling of nodeA\r\n        const siblingA = (nodeA.nextSibling === nodeB) ? nodeA : nodeA.nextSibling;\r\n        // Move nodeA before the nodeB\r\n        nodeB.parentNode.insertBefore(nodeA, nodeB);\r\n        // Move nodeB before the next sibling of nodeA\r\n        nodeA.parentNode.insertBefore(nodeB, siblingA);\r\n    }\r\n    ;\r\n}\r\n//# sourceMappingURL=Helpers.js.map","\"use strict\";\r\n/**\r\n * Dependencies\r\n */\r\nimport { Animations } from \"polaris-core/dist/js/modules/Animations\";\r\n/**\r\n * @desc The Slideshow class for handling slideshow componet and its slides\r\n */\r\nexport class Slideshow extends Animations {\r\n    /**\r\n     * @desc Constructor method\r\n     *\r\n     * @param {string|HTMLElement} slideshow -- The required slideshow selector\r\n     * @param {object}             options   -- The optional slideshow options\r\n     */\r\n    constructor(slideshow, options = {}) {\r\n        // Inherit the parent class\r\n        super();\r\n        /**\r\n         * @desc Class properties\r\n         */\r\n        // Name keys\r\n        this.nameSlideshow = 'slideshow';\r\n        this.nameSlideshowItem = 'item';\r\n        this.nameSlideshowMedia = 'media';\r\n        this.nameSlideshowOverlays = 'overlays';\r\n        this.nameSlideshowOverlay = 'overlay';\r\n        this.nameSlideshowCaptions = 'captions';\r\n        this.nameSlideshowCaption = 'caption';\r\n        this.nameSlideshowOption = 'option';\r\n        this.nameSlideshowProgress = 'progress';\r\n        this.nameSlideshowCounter = 'counter';\r\n        this.nameSlideshowPrev = 'prev';\r\n        this.nameSlideshowNext = 'next';\r\n        this.nameSlideshowDots = 'dots';\r\n        this.nameSlideshowFilter = 'filter';\r\n        // Slideshow selectors\r\n        this.slideshow = null;\r\n        this.slideshowItems = null;\r\n        this.slideshowMedias = null;\r\n        this.slideshowProgress = null;\r\n        this.slideshowCounter = null;\r\n        this.slideshowPrev = null;\r\n        this.slideshowNext = null;\r\n        this.slideshowDots = null;\r\n        // Private properties\r\n        this.itemsCount = 0;\r\n        this.activeItem = null;\r\n        this.activeDot = null;\r\n        this.activeIndex = 0;\r\n        this.animationEnter = this.fadeInAnimation;\r\n        this.animationExit = this.fadeOutAnimation;\r\n        this.slideInterval = null;\r\n        this.timerInterval = null;\r\n        this.pauseIntervals = false;\r\n        this.remainingTime = 0;\r\n        this.sliding = false;\r\n        this.firstLoad = true;\r\n        this.mediaLoaded = false;\r\n        // Default options\r\n        this.mediaShrink = true;\r\n        this.isAutoplay = false;\r\n        this.hoverPause = false;\r\n        this.timeout = 6000;\r\n        this.hasProgress = false;\r\n        this.hasCounter = false;\r\n        this.hasControls = true;\r\n        this.hasDots = false;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.slideshowSkin = 'auto';\r\n        this.mediaFilter = false;\r\n        this.mediaControls = true;\r\n        this.mediaAutoplay = false;\r\n        this.syncRatio = 0.5;\r\n        // Slideshow options\r\n        this.options = {\r\n            \"mediaShrink\": this.mediaShrink,\r\n            \"isAutoplay\": this.isAutoplay,\r\n            \"hoverPause\": this.hoverPause,\r\n            \"timeout\": this.timeout,\r\n            \"hasProgress\": this.hasProgress,\r\n            \"hasCounter\": this.hasCounter,\r\n            \"hasControls\": this.hasControls,\r\n            \"hasDots\": this.hasDots,\r\n            \"round\": false,\r\n            \"width\": null,\r\n            \"height\": null,\r\n            \"skin\": this.slideshowSkin,\r\n            \"mediaControls\": this.mediaControls,\r\n            \"mediaAutoplay\": this.mediaAutoplay,\r\n            \"syncRatio\": this.syncRatio,\r\n            \"mediaFilter\": this.mediaFilter,\r\n            \"phoneHeight\": null,\r\n            \"tabletHeight\": null,\r\n            \"desktopHeight\": null,\r\n            \"mediaEnter\": null,\r\n            \"mediaExit\": null,\r\n            \"mediaEnterPrev\": null,\r\n            \"mediaExitPrev\": null,\r\n            \"mediaEnterNext\": null,\r\n            \"mediaExitNext\": null,\r\n            \"overlayEnter\": null,\r\n            \"overlayExit\": null,\r\n            \"overlayEnterPrev\": null,\r\n            \"overlayExitPrev\": null,\r\n            \"overlayEnterNext\": null,\r\n            \"overlayExitNext\": null,\r\n            \"captionEnter\": null,\r\n            \"captionExit\": null,\r\n            \"captionEnterPrev\": null,\r\n            \"captionExitPrev\": null,\r\n            \"captionEnterNext\": null,\r\n            \"captionExitNext\": null,\r\n            \"counterPosition\": null,\r\n            \"dotsPosition\": null,\r\n            \"captionsPosition\": null,\r\n            \"overlaysPosition\": null,\r\n        };\r\n        // Valid slideshow selector\r\n        if (this.exist(slideshow)['status']) {\r\n            // String slideshow selector\r\n            if (typeof (slideshow) === \"string\") {\r\n                this.slideshow = document.querySelector(slideshow);\r\n            }\r\n            // HTMLElement slideshow selector\r\n            else if (typeof (slideshow) === \"object\") {\r\n                this.slideshow = slideshow;\r\n            }\r\n            // Set slideshow items\r\n            this.slideshowItems = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}`);\r\n            this.itemsCount = this.slideshowItems.length;\r\n            // No slide\r\n            if (this.itemsCount == 0) {\r\n                throw 'No slide found!';\r\n            }\r\n            // Set items media\r\n            this.slideshowMedias = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n            // Update options\r\n            if (options)\r\n                this.options = options;\r\n            // Check options\r\n            if (!('mediaShrink' in this.options))\r\n                this.options['mediaShrink'] = this.mediaShrink;\r\n            if (!('isAutoplay' in this.options))\r\n                this.options['isAutoplay'] = this.isAutoplay;\r\n            if (!('hoverPause' in this.options))\r\n                this.options['hoverPause'] = this.hoverPause;\r\n            if (!('timeout' in this.options))\r\n                this.options['timeout'] = this.timeout;\r\n            if (!('hasProgress' in this.options))\r\n                this.options['hasProgress'] = this.hasProgress;\r\n            if (!('hasCounter' in this.options))\r\n                this.options['hasCounter'] = this.hasCounter;\r\n            if (!('hasControls' in this.options))\r\n                this.options['hasControls'] = this.hasControls;\r\n            if (!('hasDots' in this.options))\r\n                this.options['hasDots'] = this.hasDots;\r\n            if (!('mediaControls' in this.options))\r\n                this.options['mediaControls'] = this.mediaControls;\r\n            if (!('mediaAutoplay' in this.options))\r\n                this.options['mediaAutoplay'] = this.mediaAutoplay;\r\n            if (!('syncRatio' in this.options))\r\n                this.options['syncRatio'] = this.syncRatio;\r\n            if (!('skin' in this.options))\r\n                this.options['skin'] = this.slideshowSkin;\r\n            if (!('mediaFilter' in this.options))\r\n                this.options['mediaFilter'] = this.mediaFilter;\r\n            // Final check filter\r\n            if (this.options['mediaFilter']) {\r\n                this.options['skin'] = this.nameLight;\r\n            }\r\n            // Refine ratio\r\n            if (this.options['syncRatio'] < 0) {\r\n                this.options['syncRatio'] = 0;\r\n            }\r\n            else if (this.options['syncRatio'] > 1) {\r\n                this.options['syncRatio'] = 1;\r\n            }\r\n            // Start the slideshow\r\n            this.start();\r\n        }\r\n        // Invalid slideshow selector\r\n        else {\r\n            throw 'The \"slideshow\" property of the Slideshow class cannot be empty or null!';\r\n        }\r\n    }\r\n    /**\r\n     * @desc Starts the Slideshow\r\n     *\r\n     * @return {void}\r\n     */\r\n    start() {\r\n        // Set items\r\n        this.setItems();\r\n        // Set options\r\n        this.setOptions();\r\n        // Previous Slide\r\n        this.prevSlide();\r\n        // Next Slide\r\n        this.nextSlide();\r\n        // Dots Slide\r\n        this.dotSlide();\r\n        // Slideshow events\r\n        this.slideEvents();\r\n        /**\r\n         *  Set the deault slide\r\n         */\r\n        let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                this.setSlide(0);\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n    }\r\n    /**\r\n     * @desc Sets Slideshow items\r\n     *\r\n     * @var {HTMLElement}   media       -- The items media\r\n     * @var {HTMLElement[]} overlays    -- The items overlays\r\n     * @var {HTMLElement[]} captions    -- The items captions\r\n     *\r\n     * @return {void}\r\n     */\r\n    setItems() {\r\n        // Loop items\r\n        for (let i = 0; i < this.itemsCount; i++) {\r\n            // Set data-index\r\n            this.slideshowItems[i].dataset.index = i;\r\n            // Item media\r\n            if (this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`)) {\r\n                const media = this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                // Add animation, animation-animated classList\r\n                this.addClasses(media, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                // Set content for the media\r\n                this.setContent(media, 'media');\r\n                // Set the default slide active class\r\n                if (i == 0) {\r\n                    // Set the active class\r\n                    this.activeItem = this.slideshowItems[0];\r\n                    // Add active class to slide\r\n                    this.addClass(this.activeItem, this.nameActive);\r\n                }\r\n                // Set default --animation\r\n                media.style.setProperty('--animation', 'none');\r\n            }\r\n            // Item overlays\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`).length) {\r\n                const overlays = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                // Set item overlays\r\n                overlays.forEach((overlay) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(overlay, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                    // Set content for overlays\r\n                    this.setContent(overlay);\r\n                    // Set default --animation\r\n                    overlay.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n            // Item captions\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`).length) {\r\n                const captions = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n                // Set item captions\r\n                captions.forEach((caption) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(caption, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                    // Set default --animation\r\n                    caption.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Extract extension from a file name\r\n     *\r\n     * @param {string} file -- The file name to process\r\n     *\r\n     * @var {string} ext -- The file extension\r\n     * @var {array}  arr -- The file string array\r\n     *\r\n     * @return {string}\r\n     */\r\n    fileExtension(file) {\r\n        let ext = '';\r\n        let arr = [];\r\n        // Set file array\r\n        arr = file.split('.');\r\n        // Set extension\r\n        ext = '.' + arr[arr.length - 1];\r\n        // Return the extracted extension\r\n        return ext;\r\n    }\r\n    /**\r\n     * @desc Sets the slide content\r\n     *\r\n     * @param {HTMLElement} node -- The node to set content for\r\n     *\r\n     * @var {HTMLElement} inner    -- The inner media element\r\n     * @var {string}      maxWidth -- Media images max-width\r\n     * @var {string}      alt      -- The image alternative text\r\n     * @var {string}      ext      -- The media extension\r\n     * @var {string}      type     -- The media MIME type\r\n     * @var {string}      controls -- The video controls\r\n     * @var {string}      muted    -- The muted video\r\n     *\r\n     * @return {void}\r\n     */\r\n    setContent(node, mode = null) {\r\n        let inner, index = 0, maxWidth = '', alt = '', ext = '', type = '', controls = '', muted = '';\r\n        // Check mode\r\n        if (mode == 'media') {\r\n            // Find index\r\n            index = Number(node.parentElement.dataset.index);\r\n            // Find extension\r\n            if (node.dataset.src)\r\n                ext = this.fileExtension(node.dataset.src);\r\n            // Check mediaControls\r\n            if (this.options['mediaControls'])\r\n                controls = ' controls';\r\n        }\r\n        // Media max-width\r\n        if (this.options['mediaShrink'])\r\n            maxWidth = ' style=\"max-width: inherit;\"';\r\n        // Image\r\n        if (node.dataset.type == 'image') {\r\n            // Check type\r\n            if (!['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg'].includes(ext)) {\r\n                throw `Unsupported image extension detected! \\nSupported image extensions are: ['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg']`;\r\n            }\r\n            // Check alternative text\r\n            if (node.dataset.alt)\r\n                alt = ` alt=\"${node.dataset.alt}\"`;\r\n            // Set node content\r\n            node.innerHTML = `<img src=\"${node.dataset.src}\"${alt + maxWidth}>`;\r\n            // Set inner node\r\n            inner = node.querySelector('img');\r\n        }\r\n        // Video\r\n        else if (node.dataset.type == 'video') {\r\n            // Produce file type\r\n            if (ext == '.mp4')\r\n                type = 'video/mp4';\r\n            else if (ext == '.webm')\r\n                type = 'video/webm';\r\n            else\r\n                type = '';\r\n            // Check type\r\n            if (!type) {\r\n                throw `Unsupported video extension detected! \\nSupported video extensions are: ['.mp4', '.webm']`;\r\n            }\r\n            // Check autoplay\r\n            if (this.options['mediaAutoplay']) {\r\n                muted = ' muted loop';\r\n            }\r\n            // Set node content\r\n            node.innerHTML = `<video preload=\"metadata\"${controls + muted + maxWidth}><source src=\"${node.dataset.src}\" type=\"${type}\"></video>`;\r\n            // Set inner node\r\n            inner = node.querySelector('video');\r\n        }\r\n        // HTML\r\n        else if (node.dataset.type == 'html') {\r\n            // Set node content\r\n            if (node.dataset.html)\r\n                node.innerHTML = node.dataset.html;\r\n            // Set inner node\r\n            if (node.firstElementChild)\r\n                inner = node.firstElementChild;\r\n            else\r\n                inner = node;\r\n        }\r\n        // Unknown\r\n        else {\r\n            throw 'Unsupported media format detected!';\r\n        }\r\n        // Check heigts\r\n        if (this.options['height'] || this.options['phoneHeight'] || this.options['tabletHeight'] || this.options['desktopHeight']) {\r\n            if (this.options['mediaShrink'])\r\n                inner.style.maxHeight = '100%';\r\n        }\r\n        // Media mode        \r\n        if (mode == 'media') {\r\n            // Fetch inner size after loading\r\n            // Image\r\n            if (node.dataset.type == 'image') {\r\n                inner.onload = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.naturalWidth > this.width)\r\n                        this.width = inner.naturalWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width)\r\n                        this.width = inner.getBoundingClientRect().width;\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Video\r\n            else if (node.dataset.type == 'video') {\r\n                inner.onloadedmetadata = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.clientWidth > this.width)\r\n                        this.width = inner.clientWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width)\r\n                        this.width = inner.getBoundingClientRect().width;\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Others\r\n            else {\r\n                setTimeout(() => {\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets Slideshow options\r\n     *\r\n     * @var {string}      controlsContent -- Slideshow controls (prev & next) HTML content\r\n     * @var {string}      dotsContent     -- Slideshow dots HTML content\r\n     * @var {HTMLElement} dots            -- Dots parent (container)\r\n     * @var {HTMLElement} captions        -- Captions parent (container)\r\n     * @var {HTMLElement} overlays        -- Overlays parent (container)\r\n     * @var {number}      windowWidth     -- Window available width\r\n     * @var {HTMLElement} inner           -- The inner media element\r\n     * @var {function}    interval        -- Slideshow size interval\r\n     * @var {string[]}    filterCls       -- the filter class list\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    setOptions() {\r\n        var _a;\r\n        /**\r\n         *  Single & Multiple slide\r\n         */\r\n        if (this.itemsCount >= 1) {\r\n            // Create progress\r\n            if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`)) {\r\n                this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowProgress]);\r\n            }\r\n            // Create counter\r\n            if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`)) {\r\n                this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowCounter]);\r\n            }\r\n            // Create controls\r\n            if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`)) {\r\n                const controlsContent = '&#10094;';\r\n                this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowPrev]);\r\n            }\r\n            if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`)) {\r\n                const controlsContent = '&#10095;';\r\n                this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowNext]);\r\n            }\r\n            // Create dots\r\n            if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`)) {\r\n                let dotsContent = '';\r\n                for (let i = 0; i < this.itemsCount; i++) {\r\n                    this.slideshowItems[i].dataset.index = i;\r\n                    dotsContent += `<li data-index=\"${i}\"></li>`;\r\n                }\r\n                this.append(\"ul\", this.slideshow, dotsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowDots]);\r\n            }\r\n            // Update slide items\r\n            this.slideshowProgress = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`);\r\n            this.slideshowCounter = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`);\r\n            this.slideshowPrev = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`);\r\n            this.slideshowNext = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`);\r\n            this.slideshowDots = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li`);\r\n            // Set the default dot\r\n            if (this.slideshowDots.length) {\r\n                // Set the active class\r\n                this.addClass(this.slideshowDots[0], this.nameActive);\r\n                // Update the active dot\r\n                this.activeDot = this.slideshowDots[0];\r\n            }\r\n            // Check progress\r\n            if (!this.options['hasProgress']) {\r\n                this.slideshowProgress.style.display = 'none';\r\n            }\r\n            // Check counter\r\n            if (!this.options['hasCounter']) {\r\n                this.slideshowCounter.style.display = 'none';\r\n            }\r\n            // Check controls\r\n            if (!this.options['hasControls']) {\r\n                this.slideshowPrev.style.display = 'none';\r\n                this.slideshowNext.style.display = 'none';\r\n            }\r\n            // Check dots\r\n            if (!this.options['hasDots']) {\r\n                this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`).style.display = 'none';\r\n            }\r\n        }\r\n        /**\r\n         *  Single slide\r\n         */\r\n        if (this.itemsCount == 1) {\r\n            // Check progress\r\n            if (this.options['hasProgress']) {\r\n                this.slideshowProgress.style.display = 'none';\r\n            }\r\n            // Check counter\r\n            if (this.options['hasCounter']) {\r\n                this.slideshowCounter.style.display = 'none';\r\n            }\r\n            // Check controls\r\n            if (this.options['hasControls']) {\r\n                this.slideshowPrev.style.display = 'none';\r\n                this.slideshowNext.style.display = 'none';\r\n            }\r\n            // Check dots\r\n            if (this.options['hasDots']) {\r\n                this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`).style.display = 'none';\r\n            }\r\n        }\r\n        /**\r\n         *  Set slideshow width, height\r\n         */\r\n        let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                /**\r\n                 * Slideshow width\r\n                 */\r\n                // Check width property\r\n                if (this.options['width'])\r\n                    this.width = this.options['width'];\r\n                // Set slideshow width\r\n                if (this.options['width'])\r\n                    this.slideshow.style.maxWidth = this.options['width'];\r\n                else\r\n                    this.slideshow.style.maxWidth = this.width + 'px';\r\n                /**\r\n                 * Slideshow height\r\n                 */\r\n                // Check height property\r\n                if (this.options['height'])\r\n                    this.height = this.options['height'];\r\n                else if (this.height > window.innerHeight)\r\n                    this.height = window.innerHeight;\r\n                // Window width\r\n                const windowWidth = window.innerWidth;\r\n                // Desktop\r\n                if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                    this.slideshow.style.height = this.options['desktopHeight'];\r\n                }\r\n                // Tablet\r\n                else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                    this.slideshow.style.height = this.options['tabletHeight'];\r\n                }\r\n                // Smartphone\r\n                else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                    this.slideshow.style.height = this.options['phoneHeight'];\r\n                }\r\n                // All devices\r\n                else {\r\n                    if (this.options['height'])\r\n                        this.slideshow.style.height = this.options['height'];\r\n                    else\r\n                        this.slideshow.style.height = this.height + 'px';\r\n                }\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n        /**\r\n         *  Set slideshow skin\r\n         */\r\n        // Reverse colors\r\n        if (this.options['skin'] == 'reverse') {\r\n            // Check document color\r\n            if ((_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.classList.contains(`${this.nameDoc + this.modSep + this.nameLight}`)) {\r\n                this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameDark);\r\n            }\r\n            else {\r\n                this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameLight);\r\n            }\r\n            // On class change\r\n            this.onClassChange(document.querySelector('body'), (node) => {\r\n                // Check document color\r\n                if (node.classList.contains(`${this.nameDoc + this.modSep + this.nameLight}`)) {\r\n                    this.removeClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameLight);\r\n                    this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameDark);\r\n                }\r\n                else {\r\n                    this.removeClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameDark);\r\n                    this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameLight);\r\n                }\r\n            });\r\n        }\r\n        // Normal colors\r\n        else if (this.options['skin'] != 'auto') {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.options['skin']);\r\n        }\r\n        /**\r\n         *  Set slideshow filter\r\n         */\r\n        if (this.options['mediaFilter']) {\r\n            // Produce the filter class\r\n            const filterCls = this.nameSlideshow + this.chiSep + this.nameSlideshowFilter;\r\n            // Append the filter\r\n            this.append('div', this.slideshow, '', [filterCls]);\r\n        }\r\n        /**\r\n         *  Set slideshow roundness\r\n         */\r\n        if (this.options['round']) {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameRadius);\r\n        }\r\n        /**\r\n         *  Set slideshow positions\r\n         */\r\n        // Conter position\r\n        if (this.options['counterPosition']) {\r\n            // Check element existence\r\n            if (this.slideshowCounter) {\r\n                // Unset default positions\r\n                this.slideshowCounter.style.inset = \"unset\";\r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem\";\r\n                }\r\n                // Add position class\r\n                this.addClass(this.slideshowCounter, this.namePosition + this.modSep + this.options['counterPosition']);\r\n            }\r\n        }\r\n        // Dots position\r\n        if (this.options['dotsPosition']) {\r\n            const dots = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`);\r\n            // Check element existence\r\n            if (dots) {\r\n                // Unset default positions\r\n                dots.style.inset = \"unset\";\r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem\";\r\n                }\r\n                // Add position class\r\n                this.addClass(dots, this.namePosition + this.modSep + this.options['dotsPosition']);\r\n            }\r\n        }\r\n        // Captions position\r\n        if (this.options['captionsPosition']) {\r\n            const captions = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaptions}`);\r\n            // Check element existence\r\n            if (captions.length) {\r\n                captions.forEach((caption) => {\r\n                    // Unset default positions\r\n                    caption.style.inset = \"unset\";\r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem\";\r\n                    }\r\n                    // Add position class\r\n                    this.addClass(caption, this.namePosition + this.modSep + this.options['captionsPosition']);\r\n                });\r\n            }\r\n        }\r\n        // Overlays position\r\n        if (this.options['overlaysPosition']) {\r\n            const overlays = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlays}`);\r\n            // Check element existence\r\n            if (overlays.length) {\r\n                overlays.forEach((overlay) => {\r\n                    // Unset default positions\r\n                    overlay.style.inset = \"unset\";\r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem\";\r\n                    }\r\n                    // Add position class\r\n                    this.addClass(overlay, this.namePosition + this.modSep + this.options['overlaysPosition']);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles prev control click\r\n     *\r\n     * @var {number} index -- Previous slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    prevSlide() {\r\n        if (this.slideshowPrev) {\r\n            this.slideshowPrev.onclick = () => {\r\n                // Find previous index\r\n                let index = this.activeIndex - 1;\r\n                // Check index\r\n                if (index < 0)\r\n                    index = this.itemsCount - 1;\r\n                // Set slide\r\n                this.setSlide(index, 'previous');\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles next control click\r\n     *\r\n     * @var {number} index -- Next slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    nextSlide() {\r\n        if (this.slideshowNext) {\r\n            this.slideshowNext.onclick = () => {\r\n                // Find next index\r\n                let index = this.activeIndex + 1;\r\n                // Check index\r\n                if (index >= this.itemsCount)\r\n                    index = 0;\r\n                // Set slide\r\n                this.setSlide(index, 'next');\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles dots click\r\n     *\r\n     * @var {number} index -- Clicked slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    dotSlide() {\r\n        if (this.options['hasDots']) {\r\n            this.slideshowDots.forEach((dot) => {\r\n                dot.onclick = () => {\r\n                    // Find index\r\n                    let index = Number(dot.dataset.index);\r\n                    // Set slide\r\n                    if (index != this.activeIndex)\r\n                        this.setSlide(index);\r\n                };\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles automatic slide\r\n     *\r\n     * @param {number} timeout -- Slideshow timeout\r\n     *\r\n     * @var   {number} remain  -- Remaining time\r\n     *\r\n     * @return {void}\r\n     */\r\n    autoSlide(timeout = 0) {\r\n        if (this.options['isAutoplay'] && this.itemsCount > 1) {\r\n            let remain;\r\n            // Set remain time\r\n            if (timeout)\r\n                remain = timeout;\r\n            else\r\n                remain = this.options['timeout'];\r\n            // Set slide interval\r\n            this.slideInterval = setInterval(() => {\r\n                // Set next slide\r\n                if (!this.pauseIntervals)\r\n                    this.slideshowNext.click();\r\n            }, remain);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles slideshow hover events\r\n     *\r\n     * @return {void}\r\n     */\r\n    hoverEvents() {\r\n        // On hover\r\n        this.slideshow.onmouseover = () => {\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n        };\r\n        // On leave hover\r\n        this.slideshow.onmouseleave = () => {\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n    }\r\n    /**\r\n     * @desc Handles slideshow window events\r\n     *\r\n     * @var {number}      windowWidth -- Window available width\r\n     * @var {HTMLElement} inner       -- The inner media element\r\n     *\r\n     * @return {void}\r\n     */\r\n    windowEvents() {\r\n        // Leave window\r\n        window.onblur = () => {\r\n            // Pause the media\r\n            // Video\r\n            if (this.activeItem.querySelector('video'))\r\n                this.activeItem.querySelector('video').pause();\r\n            // Audio\r\n            if (this.activeItem.querySelector('audio'))\r\n                this.activeItem.querySelector('audio').pause();\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n        };\r\n        // Show window\r\n        window.onfocus = () => {\r\n            // Reload the media\r\n            if (this.options['mediaAutoplay']) {\r\n                // Video\r\n                if (this.activeItem.querySelector('video')) {\r\n                    this.activeItem.querySelector('video').play();\r\n                }\r\n                // Audio\r\n                if (this.activeItem.querySelector('audio')) {\r\n                    this.activeItem.querySelector('audio').play();\r\n                }\r\n            }\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n        // Window resize\r\n        window.onresize = () => {\r\n            // Reset height\r\n            this.height = 0;\r\n            // Check items media\r\n            this.slideshowMedias.forEach((media) => {\r\n                // Inner element\r\n                if (media.firstElementChild) {\r\n                    const inner = media.firstElementChild;\r\n                    // Set height property\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    if (!this.options['height'] && this.height > window.innerHeight)\r\n                        this.height = window.innerHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                }\r\n                // Only text\r\n                else {\r\n                    // Set height property\r\n                    if (!this.options['height'] && media.getBoundingClientRect().height > this.height)\r\n                        this.height = media.getBoundingClientRect().height;\r\n                }\r\n            });\r\n            /**\r\n             * Slideshow height\r\n             */\r\n            // Check height property\r\n            if (this.options['height'])\r\n                this.height = this.options['height'];\r\n            // Window width\r\n            const windowWidth = window.innerWidth;\r\n            // Desktop\r\n            if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                this.slideshow.style.height = this.options['desktopHeight'];\r\n            }\r\n            // Tablet\r\n            else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                this.slideshow.style.height = this.options['tabletHeight'];\r\n            }\r\n            // Smartphone\r\n            else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                this.slideshow.style.height = this.options['phoneHeight'];\r\n            }\r\n            // All devices\r\n            else {\r\n                if (this.options['height'])\r\n                    this.slideshow.style.height = this.options['height'];\r\n                else\r\n                    this.slideshow.style.height = this.height + 'px';\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Handles slideshow events\r\n     *\r\n     * @return {void}\r\n     */\r\n    slideEvents() {\r\n        if (this.options['isAutoplay']) {\r\n            // Pause on hover\r\n            if (this.options['hoverPause']) {\r\n                // Hover events \r\n                this.hoverEvents();\r\n            }\r\n            // Window events\r\n            this.windowEvents();\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles slides timer\r\n     *\r\n     * @var {number} progressWidth -- The slideshow progress width (0-100)\r\n     *\r\n     * @return {void}\r\n     */\r\n    slideTimer() {\r\n        // Clear the interval\r\n        if (this.timerInterval)\r\n            clearInterval(this.timerInterval);\r\n        if (this.options['isAutoplay']) {\r\n            // Check progress option\r\n            if (!this.pauseIntervals) {\r\n                let progressWidth;\r\n                // Default remaining time\r\n                if (this.remainingTime <= 0)\r\n                    this.remainingTime = this.options['timeout'];\r\n                // Set timer interval\r\n                this.timerInterval = setInterval(() => {\r\n                    // Set remaining time\r\n                    this.remainingTime -= 10;\r\n                    // Produce progress width\r\n                    progressWidth = 100 - ((this.remainingTime / this.options['timeout']) * 100);\r\n                    // Set the progress width\r\n                    if (this.options['hasProgress'])\r\n                        this.slideshowProgress.style.width = progressWidth + '%';\r\n                    // Check pause or remaining time\r\n                    if (this.pauseIntervals || this.remainingTime <= 0) {\r\n                        clearInterval(this.timerInterval);\r\n                        if (this.remainingTime <= 0 && this.options['hasProgress'])\r\n                            this.slideshowProgress.style.width = '0%';\r\n                    }\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets a slide\r\n     *\r\n     * @param {number} index -- The index number\r\n     * @param {number} mode -- The slide mode (next, previous)\r\n     *\r\n     * @var {HTMLElement}   slide            -- The slideshow item (slide)\r\n     * @var {HTMLElement}   media            -- The item media\r\n     * @var {HTMLElement[]} overlays         -- The item overlays\r\n     * @var {HTMLElement[]} captions         -- The item captions\r\n     * @var {string}        mediaAnimation   -- The media animation\r\n     * @var {string}        overlayAnimation -- A specefic overlay animation\r\n     * @var {string}        captionAnimation -- A specefic caption animation\r\n     * @var {string}        slideMode        -- The slide mode {next, previous}\r\n     *\r\n     * @return {void}\r\n     */\r\n    setSlide(index, mode = null) {\r\n        // Check sliding\r\n        if (!this.sliding) {\r\n            // Clear the timer interval\r\n            if (this.timerInterval)\r\n                clearInterval(this.timerInterval);\r\n            // Stop the slide interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Reset the progressbar\r\n            if (this.options['hasProgress'])\r\n                this.slideshowProgress.style.width = '0%';\r\n            // Reset the timer\r\n            this.remainingTime = 0;\r\n            // Start sliding\r\n            this.sliding = true;\r\n            // Default vaiables\r\n            let slide, media, overlays, captions;\r\n            let mediaAnimation, overlayAnimation, captionAnimation;\r\n            let slideMode;\r\n            let ratio;\r\n            let itemTimout;\r\n            // Set mode\r\n            if (mode)\r\n                slideMode = mode;\r\n            else if (index >= this.activeIndex)\r\n                slideMode = 'next';\r\n            else\r\n                slideMode = 'previous';\r\n            /**\r\n             * Old (current) Slide\r\n             */\r\n            if (!this.firstLoad) {\r\n                // Fetch old slide items\r\n                slide = this.slideshowItems[this.activeIndex];\r\n                media = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n                // Fetch the active slide & dot\r\n                this.activeItem = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}.${this.nameActive}`);\r\n                this.activeDot = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li.${this.nameActive}`);\r\n                // Remove active class\r\n                this.removeClass(this.activeItem, this.nameActive);\r\n                // Remove active dot class\r\n                if (this.activeDot) {\r\n                    // Remove active class\r\n                    this.removeClass(this.activeDot, this.nameActive);\r\n                }\r\n                // Hide captions\r\n                if (captions.length) {\r\n                    captions.forEach((caption) => {\r\n                        // Find animation\r\n                        if (caption.dataset.exit)\r\n                            captionAnimation = caption.dataset.exit;\r\n                        else if (caption.dataset.exitPrev && slideMode == 'previous')\r\n                            captionAnimation = caption.dataset.exitPrev;\r\n                        else if (caption.dataset.exitNext && slideMode == 'next')\r\n                            captionAnimation = caption.dataset.exitNext;\r\n                        else if (this.options['captionExit'])\r\n                            captionAnimation = this.options['captionExit'];\r\n                        else if (this.options['captionExitPrev'] && slideMode == 'previous')\r\n                            captionAnimation = this.options['captionExitPrev'];\r\n                        else if (this.options['captionExitNext'] && slideMode == 'next')\r\n                            captionAnimation = this.options['captionExitNext'];\r\n                        else\r\n                            captionAnimation = this.animationExit;\r\n                        // Set animation\r\n                        this.animation(caption, captionAnimation);\r\n                    });\r\n                }\r\n                // Hide overlays\r\n                if (overlays.length) {\r\n                    overlays.forEach((overlay) => {\r\n                        // Find animation\r\n                        if (overlay.dataset.exit)\r\n                            overlayAnimation = overlay.dataset.exit;\r\n                        else if (overlay.dataset.exitPrev && slideMode == 'previous')\r\n                            overlayAnimation = overlay.dataset.exitPrev;\r\n                        else if (overlay.dataset.exitNext && slideMode == 'next')\r\n                            overlayAnimation = overlay.dataset.exitNext;\r\n                        else if (this.options['overlayExit'])\r\n                            overlayAnimation = this.options['overlayExit'];\r\n                        else if (this.options['overlayExitPrev'] && slideMode == 'previous')\r\n                            overlayAnimation = this.options['overlayExitPrev'];\r\n                        else if (this.options['overlayExitNext'] && slideMode == 'next')\r\n                            overlayAnimation = this.options['overlayExitNext'];\r\n                        else\r\n                            overlayAnimation = this.animationExit;\r\n                        // Set animation\r\n                        this.animation(overlay, overlayAnimation);\r\n                    });\r\n                }\r\n                // Hide media\r\n                if (media) {\r\n                    // Pause the media\r\n                    // Video\r\n                    if (media.querySelector('video'))\r\n                        media.querySelector('video').pause();\r\n                    // Audio\r\n                    if (media.querySelector('audio'))\r\n                        media.querySelector('audio').pause();\r\n                    // Find animation\r\n                    if (media.dataset.exit)\r\n                        mediaAnimation = media.dataset.exit;\r\n                    else if (media.dataset.exitPrev && slideMode == 'previous')\r\n                        mediaAnimation = media.dataset.exitPrev;\r\n                    else if (media.dataset.exitNext && slideMode == 'next')\r\n                        mediaAnimation = media.dataset.exitNext;\r\n                    else if (this.options['mediaExit'])\r\n                        mediaAnimation = this.options['mediaExit'];\r\n                    else if (this.options['mediaExitPrev'] && slideMode == 'previous')\r\n                        mediaAnimation = this.options['mediaExitPrev'];\r\n                    else if (this.options['mediaExitNext'] && slideMode == 'next')\r\n                        mediaAnimation = this.options['mediaExitNext'];\r\n                    else\r\n                        mediaAnimation = this.animationExit;\r\n                    // Set animation\r\n                    this.animation(media, mediaAnimation);\r\n                }\r\n            }\r\n            /**\r\n             * New Slide\r\n             */\r\n            // Update the first load\r\n            if (this.firstLoad)\r\n                this.firstLoad = false;\r\n            // Find new slide items\r\n            slide = this.slideshowItems[index];\r\n            media = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n            overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n            captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n            // Update the active item\r\n            this.activeItem = slide;\r\n            // Add active class to slide\r\n            this.addClass(slide, this.nameActive);\r\n            // Add active class to relative dot\r\n            this.slideshowDots.forEach((dot) => {\r\n                if (Number(dot.dataset.index) == index) {\r\n                    this.addClass(dot, this.nameActive);\r\n                    // Update the active dot\r\n                    this.activeDot = dot;\r\n                }\r\n            });\r\n            // Show media\r\n            if (media) {\r\n                // Reload the media\r\n                if (this.options['mediaAutoplay']) {\r\n                    // Video\r\n                    if (media.querySelector('video')) {\r\n                        media.querySelector('video').load();\r\n                        media.querySelector('video').play();\r\n                    }\r\n                    // Audio\r\n                    if (media.querySelector('audio')) {\r\n                        media.querySelector('audio').load();\r\n                        media.querySelector('audio').play();\r\n                    }\r\n                }\r\n                // Find animation\r\n                if (media.dataset.enter)\r\n                    mediaAnimation = media.dataset.enter;\r\n                else if (media.dataset.enterPrev && slideMode == 'previous')\r\n                    mediaAnimation = media.dataset.enterPrev;\r\n                else if (media.dataset.enterNext && slideMode == 'next')\r\n                    mediaAnimation = media.dataset.enterNext;\r\n                else if (this.options['mediaEnter'])\r\n                    mediaAnimation = this.options['mediaEnter'];\r\n                else if (this.options['mediaEnterPrev'] && slideMode == 'previous')\r\n                    mediaAnimation = this.options['mediaEnterPrev'];\r\n                else if (this.options['mediaEnterNext'] && slideMode == 'next')\r\n                    mediaAnimation = this.options['mediaEnterNext'];\r\n                else\r\n                    mediaAnimation = this.animationEnter;\r\n                // Set animation\r\n                this.animation(media, mediaAnimation).then(() => {\r\n                    // Clear the timer interval\r\n                    if (this.timerInterval)\r\n                        clearInterval(this.timerInterval);\r\n                    // Stop the intervals\r\n                    if (this.slideInterval)\r\n                        clearInterval(this.slideInterval);\r\n                    // Run Autoplay\r\n                    this.autoSlide();\r\n                    // Run timer\r\n                    this.slideTimer();\r\n                    // Stop sliding\r\n                    this.sliding = false;\r\n                });\r\n            }\r\n            // Synchronicity ratio\r\n            if (media.dataset.duration) {\r\n                // Miliseconds\r\n                if (media.dataset.duration.search(\"ms\")) {\r\n                    ratio = parseInt(media.dataset.duration);\r\n                }\r\n                // Seconds\r\n                else {\r\n                    ratio = parseInt(media.dataset.duration) * 1000;\r\n                }\r\n            }\r\n            else {\r\n                ratio = 1000;\r\n            }\r\n            // Refine ratio\r\n            ratio *= this.options['syncRatio'];\r\n            // Show slide items\r\n            clearTimeout(itemTimout);\r\n            itemTimout = setTimeout(() => {\r\n                // Show overlays\r\n                if (overlays.length) {\r\n                    overlays.forEach((overlay) => {\r\n                        // Find animation\r\n                        if (overlay.dataset.enter)\r\n                            overlayAnimation = overlay.dataset.enter;\r\n                        else if (overlay.dataset.enterPrev && slideMode == 'previous')\r\n                            overlayAnimation = overlay.dataset.enterPrev;\r\n                        else if (overlay.dataset.enterNext && slideMode == 'next')\r\n                            overlayAnimation = overlay.dataset.enterNext;\r\n                        else if (this.options['overlayEnter'])\r\n                            overlayAnimation = this.options['overlayEnter'];\r\n                        else if (this.options['overlayEnterPrev'] && slideMode == 'previous')\r\n                            overlayAnimation = this.options['overlayEnterPrev'];\r\n                        else if (this.options['overlayEnterNext'] && slideMode == 'next')\r\n                            overlayAnimation = this.options['overlayEnterNext'];\r\n                        else\r\n                            overlayAnimation = this.animationEnter;\r\n                        // Set animation\r\n                        this.animation(overlay, overlayAnimation);\r\n                    });\r\n                }\r\n                // Show captions\r\n                if (captions.length) {\r\n                    captions.forEach((caption) => {\r\n                        // Find animation\r\n                        if (caption.dataset.enter)\r\n                            captionAnimation = caption.dataset.enter;\r\n                        else if (caption.dataset.enterPrev && slideMode == 'previous')\r\n                            captionAnimation = caption.dataset.enterPrev;\r\n                        else if (caption.dataset.enterNext && slideMode == 'next')\r\n                            captionAnimation = caption.dataset.enterNext;\r\n                        else if (this.options['captionEnter'])\r\n                            captionAnimation = this.options['captionEnter'];\r\n                        else if (this.options['captionEnterPrev'] && slideMode == 'previous')\r\n                            captionAnimation = this.options['captionEnterPrev'];\r\n                        else if (this.options['captionEnterNext'] && slideMode == 'next')\r\n                            captionAnimation = this.options['captionEnterNext'];\r\n                        else\r\n                            captionAnimation = this.animationEnter;\r\n                        // Set animation\r\n                        this.animation(caption, captionAnimation);\r\n                    });\r\n                }\r\n            }, ratio);\r\n            // Set counter\r\n            if (this.options['hasCounter'])\r\n                this.slideshowCounter.innerHTML = `${Number(slide.dataset.index) + 1}/${this.itemsCount}`;\r\n            // Update active index\r\n            this.activeIndex = index;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Slideshow.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Import the Core Class\r\n */ \r\nimport {Core} from \"polaris-core/dist/js/modules/Core\";\r\n\r\n\r\n/**\r\n * Import Plugins\r\n */\r\nimport {Slideshow} from \"polaris-slideshow/dist/js/modules/Slideshow\";\r\n\r\n\r\n/**\r\n * Polaris object\r\n */\r\nconst Polaris = {\r\n    Core: Core,\r\n    Slideshow: Slideshow,\r\n}\r\n\r\n\r\n/**\r\n * Export default\r\n */\r\nexport default Polaris;"],"names":[],"sourceRoot":""}