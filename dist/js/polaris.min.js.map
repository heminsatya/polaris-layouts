{"version":3,"file":"polaris.min.js","mappings":"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","sources":["webpack://Polaris/webpack/universalModuleDefinition","webpack://Polaris/webpack/bootstrap","webpack://Polaris/webpack/runtime/define property getters","webpack://Polaris/webpack/runtime/hasOwnProperty shorthand","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Config.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Helpers.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Animations.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Alerts.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Modal.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Defaults.js","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Blueprints.js","webpack://Polaris/./src/ts/polaris.ts","webpack://Polaris/./node_modules/polaris-core/dist/js/modules/Core.js","webpack://Polaris/./node_modules/polaris-slideshow/dist/js/modules/Slideshow.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Polaris\"] = factory();\n\telse\n\t\troot[\"Polaris\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * @desc Used for the configuration of Polaris JS library\r\n */\r\nexport class Config {\r\n    constructor() {\r\n        this.modSep = \"-\"; // Modifier Separator\r\n        this.chiSep = \"--\"; // Child Separator\r\n        this.sibSep = \"_\"; // Sibling Separator\r\n        this.parSep = \"__\"; // Parent Separator\r\n        this.nameDoc = \"doc\"; // Name key for document component\r\n        this.nameLight = \"light\"; // Name key for light color\r\n        this.nameDark = \"dark\"; // Name key for dark color\r\n        this.nameAnimation = \"animation\"; // Name key for animation component\r\n        this.nameAnimated = \"animated\"; // Name key for animation-animated\r\n        this.nameRipple = \"ripple\"; // Name key for ripple component\r\n        this.nameAlert = \"alert\"; // Name key for alert component\r\n        this.nameMessages = \"msg\"; // Name key for msg component\r\n        this.nameBackdrop = \"backdrop\"; // Name key for backdrop component\r\n        this.namePopup = \"popup\"; // Name key for popup component\r\n        this.nameMenu = \"menu\"; // Name key for menu component\r\n        this.nameModal = \"modal\"; // Name key for modal component\r\n        this.nameBlueprint = \"blueprint\"; // Name key for component's blueprint\r\n        this.nameContainer = \"container\"; // Name key for container\r\n        this.nameControl = \"control\"; // Name key for control\r\n        this.nameIcon = \"icon\"; // Name key for icon\r\n        this.nameContent = \"content\"; // Name key for content\r\n        this.nameClose = \"close\"; // Name key for close\r\n        this.nameClick = \"click\"; // Name key for click\r\n        this.nameActive = \"active\"; // Name key for active\r\n        this.nameVoid = \"void\"; // Name key for active\r\n        this.nameOpen = \"open\"; // Name key for open inffix\r\n        this.nameHeader = \"header\"; // Name key for header\r\n        this.nameBody = \"body\"; // Name key for body\r\n        this.nameFooter = \"footer\"; // Name key for footer\r\n        this.nameWidth = \"w\"; // Name key for css width classes\r\n        this.nameHeight = \"h\"; // Name key for css height classes\r\n        this.nameRadius = \"round\"; // Name key for border-radius & component roundness\r\n        this.namePosition = \"position\"; // Name key for position classes\r\n        this.fadeInAnimation = \"fadeIn\"; // fadeIn animation\r\n        this.fadeOutAnimation = \"fadeOut\"; // fadeOut animation\r\n        this.hideYAnimation = \"hideY\"; // hideY animation\r\n        this.rippleAnimation = \"ripple\"; // ripple animation\r\n        this.rippleAutoAnimation = \"rippleAuto\"; // rippleAuto animation\r\n        this.piAlertCircle = \"pi-alert-circle\"; // Polaris Icon: alert-circle\r\n        this.piAlertTri = \"pi-alert-triangle\"; // Polaris Icon: alert-triangle\r\n        this.piAlertTick = \"pi-alert-tick\"; // Polaris Icon: alert-tick\r\n        this.piClose = \"pi-close\"; // Polaris Icon: close\r\n        this.hideTimeout = 8000; // Default hide timeout (in miliseconds)\r\n        this.alertPosition = \"bottom\"; // Alert default position\r\n        this.polarisSizes = ['xs', 'sm', 'md', 'lg', 'xl']; // Polaris standard sizes\r\n        this.phoneWidth = 0; // Smartphone min-width\r\n        this.tabletWidth = 768; // Tablet min-width\r\n        this.desktopWidth = 1280; // Desktop min-width\r\n    }\r\n}\r\n//# sourceMappingURL=Config.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Config } from \"./Config\";\r\n/**\r\n * @desc Polaris JS helper methods\r\n */\r\nexport class Helpers extends Config {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n        /**\r\n         * @desc For removeing character(s) in a string before some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string | undefined}\r\n         */\r\n        this.removeBefore = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find).pop();\r\n            }\r\n            else {\r\n                return find + str.split(find).pop();\r\n            }\r\n        };\r\n        /**\r\n         * @desc For removeing character(s) in a string after some character(s)\r\n         *\r\n         * @param {string}  str    -- The string to format\r\n         * @param {string}  find   -- The character(s) to find\r\n         * @param {boolean} strict -- Remove the character itself?\r\n         *\r\n         * @return {string}\r\n         */\r\n        this.removeAfter = (str, find, strict = false) => {\r\n            if (strict) {\r\n                return str.split(find)[0];\r\n            }\r\n            else {\r\n                return str.split(find)[0] + find;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Checks a selector for type & existence\r\n     *\r\n     * @param {string | HTMLElement} selector -- The selector name (object)\r\n     *\r\n     * @return {object}\r\n     */\r\n    exist(selector = null) {\r\n        // Default variables\r\n        let result = {};\r\n        // Set the default result response\r\n        result = {\r\n            status: true,\r\n            message: `Passed!`\r\n        };\r\n        // Empty or null selector\r\n        if (!selector) {\r\n            result = {\r\n                status: false,\r\n                message: `The \"selector\" parameter cannot be empty or null.`\r\n            };\r\n        }\r\n        // String type\r\n        else if (typeof (selector) === \"string\") {\r\n            if (document.querySelectorAll(selector).length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector \"${selector}\" not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Object type\r\n        else if (typeof (selector) === \"object\") {\r\n            if (selector.length == 0) {\r\n                result = {\r\n                    status: false,\r\n                    message: `The selector object not exists on the window object!`\r\n                };\r\n            }\r\n        }\r\n        // Return the result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Produces the querySelector object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selector(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelector(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Produces the querySelectorAll object\r\n     *\r\n     * @param {string} selector -- The selector name\r\n     *\r\n     * @return {object}\r\n     */\r\n    selectors(selector) {\r\n        // Check selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        else if (this.exist(selector)['status']) {\r\n            // Return the result\r\n            return document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n    }\r\n    /**\r\n     * @desc Checks if an element is visible on the screen\r\n     *\r\n     * @param {string | object} selector  -- The selector name (object)\r\n     * @param {string}          from      -- Visible from (top, bottom, or both)\r\n     * @param {number}          tolerance -- The scroll tolerance\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    visible(selector, from = 'both', tolerance = 0) {\r\n        let result = false;\r\n        let rect = null;\r\n        let windowHeight = window.innerHeight;\r\n        let viewHeight = Math.max(document.documentElement.clientHeight, windowHeight);\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                rect = document.querySelector(selector);\r\n                rect = rect.getBoundingClientRect();\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                rect = selector.getBoundingClientRect();\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Scroll top & bottom\r\n        if (from == 'both') {\r\n            result = rect.bottom >= tolerance && rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll top\r\n        else if (from == 'top') {\r\n            result = rect.top < viewHeight - tolerance;\r\n        }\r\n        // Scroll bottom\r\n        else if (from == 'bottom') {\r\n            result = rect.bottom >= tolerance;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Prepends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    prepend(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Prepend the node\r\n        node.innerHTML = content;\r\n        parentNode.insertBefore(node, parentNode.firstChild);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Appends an HTML element to a parent element\r\n     *\r\n     * @param {string}          selector  -- The selector name\r\n     * @param {string | object} parent    -- The selector's parent name (object)\r\n     * @param {string}          content   -- The selector's content\r\n     * @param {object}          classList -- The selector's class list ['class-1', 'class-2', ...]\r\n     * @param {string}          id        -- The selector's id name\r\n     * @param {string}          style     -- The selector's inline CSS styles\r\n     * @param {object}          attrs     -- The selector's attributes\r\n     *\r\n     * @return {HTMLElement | boolean}\r\n     */\r\n    append(selector, parent, content, classList = [], id = \"\", style = \"\", attrs = {}) {\r\n        let parentNode = null;\r\n        // Check the selector\r\n        if (typeof (selector) !== \"string\") {\r\n            throw `The selector must be of type \"string\".`;\r\n        }\r\n        // Check the parent\r\n        if (this.exist(parent)['status']) {\r\n            if (typeof (parent) === \"string\") {\r\n                parentNode = document.querySelector(parent);\r\n            }\r\n            else if (typeof (parent) === \"object\") {\r\n                parentNode = parent;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(parent)['message'];\r\n        }\r\n        // Create the node\r\n        const node = document.createElement(selector);\r\n        // Add class list\r\n        classList.forEach((cls) => {\r\n            node.classList.add(cls);\r\n        });\r\n        // Add id\r\n        if (id) {\r\n            node.setAttribute(\"id\", id);\r\n        }\r\n        // Add style\r\n        if (style) {\r\n            node.style.cssText = style;\r\n        }\r\n        // Add attributes\r\n        if (attrs) {\r\n            for (let attr in attrs) {\r\n                node.setAttribute(attr, attrs[attr]);\r\n            }\r\n        }\r\n        // Append the node\r\n        node.innerHTML = content;\r\n        parentNode.appendChild(node);\r\n        // Return the node\r\n        return node;\r\n    }\r\n    /**\r\n     * @desc Removes an HTML element from the DOM\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    remove(selector) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the node\r\n        node.remove();\r\n    }\r\n    /**\r\n     * @desc For writing the whole document\r\n     *\r\n     * @param {string} content -- The document content\r\n     *\r\n     * @return {void}\r\n     */\r\n    write(content = \"\") {\r\n        javascript: document.open('text/html');\r\n        document.write(content);\r\n        document.close();\r\n    }\r\n    /**\r\n     * @desc Loops a function for a couple of times\r\n     *\r\n     * @param {function} fn    -- The function that needed to be looped\r\n     * @param {number}   delay -- The time delay for each iteration\r\n     * @param {number}   count -- The loop count\r\n     *\r\n     * @return {void}\r\n     */\r\n    loop(fn, delay = 1000, count = Infinity) {\r\n        let i = 0;\r\n        let interval = setInterval(() => {\r\n            // Exit the loop\r\n            if (i == count || count <= 0) {\r\n                clearInterval(interval);\r\n                return false;\r\n            }\r\n            // Invoke the function\r\n            fn();\r\n            i++;\r\n        }, delay);\r\n    }\r\n    /**\r\n     * @desc Excecutes a function after document fully loaded\r\n     *\r\n     * @param {function} fn -- The callback function\r\n     *\r\n     * @return {void}\r\n     */\r\n    loaded(fn) {\r\n        return document.addEventListener('DOMContentLoaded', () => {\r\n            fn();\r\n        });\r\n    }\r\n    /**\r\n     * @desc For escaping Regular Expression search characters\r\n     *\r\n     * @param {string} str -- The string to format\r\n     *\r\n     * @return {string}\r\n     */\r\n    escape(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n    }\r\n    /**\r\n     * @desc For replacing character(s) in a string\r\n     *\r\n     * @param {string} str     -- The string to format\r\n     * @param {string} find    -- The character(s) to find\r\n     * @param {string} replace -- The character(s) to replace\r\n     *\r\n     * @return {string}\r\n     */\r\n    replace(str, find, replace) {\r\n        return str.replace(new RegExp(this.escape(find), 'g'), replace);\r\n    }\r\n    /**\r\n     * @desc For redirecting http URLs\r\n     *\r\n     * @param {string} url -- The URL to redirect\r\n     *\r\n     * @return {void}\r\n     */\r\n    redirect(url = \"/\") {\r\n        window.location.href = url;\r\n    }\r\n    /**\r\n     * @desc Finds page relative href\r\n     *\r\n     * @return {string}\r\n     */\r\n    href() {\r\n        return this.replace(window.location.href, window.location.origin, \"\");\r\n    }\r\n    /**\r\n     * @desc Calculates the scrollbar width\r\n     *\r\n     * @return {number}\r\n     */\r\n    scrollWidth() {\r\n        return window.innerWidth - document.documentElement.clientWidth;\r\n    }\r\n    /**\r\n     * @desc Checks a file for existence\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    fileExist(file) {\r\n        // Create a new XML HTTP Request\r\n        let xhr = new XMLHttpRequest();\r\n        // Request the file\r\n        xhr.open('HEAD', file, false);\r\n        xhr.send();\r\n        // File not found\r\n        if (xhr.status == \"404\") {\r\n            return false;\r\n        }\r\n        // File found\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in JSON format\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    json(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Reads and returns a file content as a promise in plain text\r\n     *\r\n     * @param {string} file -- The absolute file path\r\n     *\r\n     * @return {object|boolean}\r\n     */\r\n    text(file, strict = false) {\r\n        // Check strict mod\r\n        if (strict) {\r\n            // Check file existence\r\n            if (!this.fileExist(file)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let final = null;\r\n            // Fetch file\r\n            fetch(file)\r\n                .then(response => response.text())\r\n                .then(result => {\r\n                final = result;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(final);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Creates a promise to copy a text to clipboard and returns the result\r\n     *\r\n     * @param {string} text -- The text to copy\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    copy(text) {\r\n        // Create a new promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            let result = null;\r\n            navigator.clipboard.writeText(text)\r\n                .then(() => result = true, err => {\r\n                console.error('Copy Error: ', err);\r\n                result = false;\r\n            })\r\n                .then(() => {\r\n                // Resolve the promise\r\n                resolve(result);\r\n            });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Adds a class to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string} cls             -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Add the class\r\n        if (!node.classList.contains(cls)) {\r\n            node.classList.add(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Removes a class to a selector\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string} cls               -- The class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    removeClass(selector, cls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the class\r\n        if (node.classList.contains(cls)) {\r\n            node.classList.remove(cls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Toggles an old class with a new class for a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string}        oldCls   -- The old class name\r\n     * @param {string}        newCls   -- The new class name\r\n     *\r\n     * @return {void}\r\n     */\r\n    toggleClass(selector, oldCls, newCls) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Remove the old class\r\n        if (node.classList.contains(oldCls)) {\r\n            node.classList.remove(oldCls);\r\n        }\r\n        // Add the new class\r\n        if (!node.classList.contains(newCls)) {\r\n            node.classList.add(newCls);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Adds a class list(array) to a selector\r\n     *\r\n     * @param {string|object} selector -- The selector name (object)\r\n     * @param {string[]} classList     -- The class list (array)\r\n     *\r\n     * @return {void}\r\n     */\r\n    addClasses(selector, classList) {\r\n        let node = null;\r\n        // Check the selector\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Loop classes\r\n        classList.forEach((cls) => {\r\n            // Add the class\r\n            if (!node.classList.contains(cls)) {\r\n                node.classList.add(cls);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into uppercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    upper(text) {\r\n        return text.toLocaleUpperCase();\r\n    }\r\n    /**\r\n     * @desc Converts and returns a string into lowercase, taking into account the current locale\r\n     *\r\n     * @param {string} text -- The text to excecute\r\n     *\r\n     * @return {string}\r\n     */\r\n    lower(text) {\r\n        return text.toLocaleLowerCase();\r\n    }\r\n    /**\r\n     * @desc Returns the computed style for an element\r\n     *\r\n     * @param {string | HTMLElement} selector -- The node seclector\r\n     *\r\n     * @return {string}\r\n     */\r\n    getStyle(selector, property) {\r\n        let node, result;\r\n        // String type\r\n        if (typeof (selector) == \"string\") {\r\n            node = document.querySelectorAll(selector);\r\n        }\r\n        else {\r\n            node = selector;\r\n        }\r\n        // Property exists\r\n        const view = (node.ownerDocument || document).defaultView;\r\n        if (view && view.getComputedStyle) {\r\n            result = view.getComputedStyle(node, null).getPropertyValue(property);\r\n        }\r\n        // Property not exists\r\n        else {\r\n            result == undefined;\r\n        }\r\n        // Return result\r\n        return result;\r\n    }\r\n    /**\r\n     * @desc Checks if the browser is fullscreen\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isFullscreen() {\r\n        if (window.innerWidth == screen.width && window.innerHeight == screen.height) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Request an element to be fullscreen\r\n     *\r\n     * @var {any} method -- The request method\r\n     *\r\n     * @return {void}\r\n     */\r\n    fullscreen(elem) {\r\n        if (!this.isFullscreen()) {\r\n            const method = elem.requestFullScreen || elem.webkitRequestFullScreen || elem.mozRequestFullScreen || elem.msRequestFullScreen;\r\n            return method.call(elem);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Exits browser fullscreen\r\n     *\r\n     * @var {any} elem -- The document object\r\n     *\r\n     * @return {void}\r\n     */\r\n    exitFullscreen() {\r\n        const elem = document;\r\n        if (this.isFullscreen()) {\r\n            return elem.exitFullscreen() || elem.webkitExitFullscreen() || elem.mozCancelFullScreen() || elem.msExitFullscreen();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Helpers.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Helpers } from \"./Helpers\";\r\n/**\r\n * @desc Used for setting & handling animations\r\n */\r\nexport class Animations extends Helpers {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Sets and returns a new animation Promise\r\n     *\r\n     * @param {any}     selector  -- The selector name (object)\r\n     * @param {string}  animation -- The animation name\r\n     * @param {boolean} clear     -- For clearing the animation after it has been ended\r\n     *\r\n     * @return {any}\r\n     */\r\n    animation(selector, animation = \"\", clear = false) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check animation\r\n        if (animation == \"\") {\r\n            // Unset the animation\r\n            // node.removeAttribute('data-animation');\r\n            node.style.removeProperty('animation-name');\r\n            // Exit the method\r\n            return false;\r\n        }\r\n        // // Check current animation\r\n        // if (this.getStyle(selector, 'animation-name') == animation) {\r\n        //     // TODO\r\n        // }\r\n        // // Wait for all animations to be finished\r\n        // Promise.all(\r\n        //     node.getAnimations({ subtree: false })\r\n        //     .map((animation:any) => animation.finished)\r\n        // ).then(() => {\r\n        //     // TODO\r\n        // });\r\n        // Animation promise\r\n        const promise = new Promise((resolve, reject) => {\r\n            // Check datasets and set variables\r\n            this.datasets(node);\r\n            // Set the new animation\r\n            // node.setAttribute(\"data-animation\", animation);\r\n            node.style.setProperty('animation-name', animation);\r\n            // Animation resolve callback\r\n            function animationEnd(event) {\r\n                event.stopPropagation();\r\n                // Check animation clearance\r\n                if (clear) {\r\n                    // node.removeAttribute('data-animation');\r\n                    node.style.removeProperty('animation-name');\r\n                }\r\n                // Promise on resolve\r\n                resolve('Animation ended!');\r\n                // Promise on reject\r\n                reject('Animation crashed!');\r\n            }\r\n            // Animation end listener\r\n            node.addEventListener('animationend', animationEnd, { once: true });\r\n        });\r\n        // Return the promise\r\n        return promise;\r\n    }\r\n    /**\r\n     * @desc Checks animation datasets and sets relevant variables\r\n     *\r\n     * @param {object} selector -- The selector object\r\n     *\r\n     * @return {void}\r\n     */\r\n    datasets(selector) {\r\n        // data-animation\r\n        if (selector.dataset.animation) {\r\n            selector.style.setProperty('animation-name', selector.dataset.animation);\r\n        }\r\n        // data-duration\r\n        if (selector.dataset.duration) {\r\n            selector.style.setProperty('--animation-duration', selector.dataset.duration);\r\n        }\r\n        // data-delay\r\n        if (selector.dataset.delay) {\r\n            selector.style.setProperty('--animation-delay', selector.dataset.delay);\r\n        }\r\n        // data-count\r\n        if (selector.dataset.count) {\r\n            selector.style.setProperty('--animation-count', selector.dataset.count);\r\n        }\r\n        // data-function\r\n        if (selector.dataset.function) {\r\n            selector.style.setProperty('--animation-function', selector.dataset.function);\r\n        }\r\n        // data-state\r\n        if (selector.dataset.state) {\r\n            selector.style.setProperty('--animation-state', selector.dataset.state);\r\n        }\r\n        // data-position\r\n        if (selector.dataset.position) {\r\n            selector.style.setProperty('--animation-position', selector.dataset.position);\r\n        }\r\n        // data-scale\r\n        if (selector.dataset.scale) {\r\n            selector.style.setProperty('--animation-scale', selector.dataset.scale);\r\n        }\r\n        // data-perspective\r\n        if (selector.dataset.perspective) {\r\n            selector.style.setProperty('--animation-perspective', selector.dataset.perspective);\r\n        }\r\n        // data-degree\r\n        if (selector.dataset.degree) {\r\n            selector.style.setProperty('--animation-degree', selector.dataset.degree);\r\n        }\r\n        // data-height\r\n        if (selector.dataset.height) {\r\n            selector.style.setProperty('--animation-height', selector.dataset.height);\r\n        }\r\n        // data-width\r\n        if (selector.dataset.width) {\r\n            selector.style.setProperty('--animation-width', selector.dataset.width);\r\n        }\r\n        // data-brightness\r\n        if (selector.dataset.brightness) {\r\n            selector.style.setProperty('--animation-brightness', selector.dataset.brightness);\r\n        }\r\n        // data-dimension\r\n        if (selector.dataset.dimension) {\r\n            selector.style.setProperty('--animation-dimension', selector.dataset.dimension);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Makes selectors animated\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {string}          mod      -- The scroll mod\r\n     *\r\n     * @return {void}\r\n     */\r\n    animated(selector, mod = 'bottom') {\r\n        let nodes = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                nodes = document.querySelectorAll(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                nodes = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        nodes.forEach((node) => {\r\n            let tolerance = node.dataset.tolerance;\r\n            let animationEnter = node.dataset.enter;\r\n            let animationExit = node.dataset.exit;\r\n            // Check data-tolerance\r\n            if (!tolerance) {\r\n                tolerance = 0;\r\n            }\r\n            // Check data-enter\r\n            if (!animationEnter) {\r\n                animationEnter = 'fadeIn';\r\n            }\r\n            // Check data-exit\r\n            if (!animationExit) {\r\n                animationExit = 'fadeOut';\r\n            }\r\n            // Check element visibility\r\n            if (this.visible(node, mod, tolerance)) {\r\n                // Animation enter\r\n                this.animation(node, animationEnter);\r\n            }\r\n            else {\r\n                // Animation exit\r\n                this.animation(node, animationExit);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @desc Loops an animation\r\n     *\r\n     * @param {string | object} selector -- The selector name (object)\r\n     * @param {number}          duration -- The loop duration (in miliseconds)\r\n     * @param {number}          count    -- The loop count\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    animating(selector, duration = 1000, count = Infinity) {\r\n        let node = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                node = document.querySelector(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                node = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check element visibility\r\n        if (this.visible(node, \"both\", 0)) {\r\n            this.loop(() => {\r\n                let animation = node.getAttribute('data-animation');\r\n                // node.removeAttribute('data-animation');\r\n                node.style.removeProperty('animation-name');\r\n                node.offsetTop;\r\n                // node.setAttribute('data-animation', animation);\r\n                node.style.setProperty('animation-name', animation);\r\n            }, duration, count - 1);\r\n        }\r\n    }\r\n    /**\r\n     * @desc For navigation active class on page scroll\r\n     *\r\n     * @param {string | object} selector  -- The selector name (object)\r\n     * @param {string | object} navigator -- The navigator selector name (object)\r\n     * @param {string}          active    -- The navigator active class\r\n     * @param {number}          tolerance -- The scroll tolerance\r\n     *\r\n     * @return {void | boolean}\r\n     */\r\n    navigated(selector, navigator, active = 'active', tolerance = 0) {\r\n        let selectors = null;\r\n        let navigators = null;\r\n        // Check the selectors\r\n        if (this.exist(selector)['status']) {\r\n            if (typeof (selector) === \"string\") {\r\n                selectors = document.querySelectorAll(selector);\r\n            }\r\n            else if (typeof (selector) === \"object\") {\r\n                selectors = selector;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(selector)['message'];\r\n        }\r\n        // Check the navigators\r\n        if (this.exist(navigator)['status']) {\r\n            if (typeof (navigator) === \"string\") {\r\n                navigators = document.querySelectorAll(navigator);\r\n            }\r\n            else if (typeof (navigator) === \"object\") {\r\n                navigators = navigator;\r\n            }\r\n        }\r\n        else {\r\n            throw this.exist(navigator)['message'];\r\n        }\r\n        // Navigation links\r\n        selectors.forEach((node) => {\r\n            let top = window.scrollY;\r\n            let height = node.offsetHeight;\r\n            let offset = node.offsetTop - tolerance;\r\n            let id = node.getAttribute(\"id\");\r\n            // Set the active class\r\n            if (top >= offset && top < offset + height) {\r\n                navigators.forEach((link) => {\r\n                    link.classList.remove(active);\r\n                    document.querySelector(`${navigator}[href*=${id}`).classList.add(active);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=Animations.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Animations } from \"./Animations\";\r\n/**\r\n * @desc Used for setting alerts\r\n */\r\nexport class Alerts extends Animations {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    // Set Alert\r\n    /**\r\n     * @desc Sets an alert to alert__container#alert-blueprint\r\n     *\r\n     * @param {string} text     -- Alert text\r\n     * @param {string} enter    -- Alert animation enter\r\n     * @param {string} exit     -- Alert animation exit\r\n     * @param {string} status   -- Alert status: notice | warning | success\r\n     * @param {string} color    -- Alert color:  light | dark\r\n     * @param {boolean} close   -- Closable alert: true | false\r\n     * @param {number} duration -- Alert animation duration: number in miliseconds\r\n     * @param {number} delay    -- Alert animation delay: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    alert(text, enter = \"fadeIn\", exit = \"fadeOut\", status = \"\", color = \"\", close = true, duration = 500, delay = 250) {\r\n        // Set the status code\r\n        let statusCode = \"\";\r\n        let statusClass = \"\";\r\n        if (status)\r\n            statusClass = ` ${this.nameAlert + this.modSep + this.nameIcon}`;\r\n        if (status === \"notice\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertCircle}\"></div>`;\r\n        }\r\n        else if (status === \"warning\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertTri}\"></div>`;\r\n        }\r\n        else if (status === \"success\") {\r\n            statusCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameIcon} ${this.piAlertTick}\"></div>`;\r\n        }\r\n        // Set the color class\r\n        let colorClass = \"\";\r\n        if (color === \"light\") {\r\n            colorClass = ` ${this.nameAlert + this.modSep + color}`;\r\n        }\r\n        // Check the closable\r\n        let closeCode = \"\";\r\n        let closeClass = \"\";\r\n        if (close) {\r\n            closeCode = `<div class=\"${this.nameAlert + this.chiSep + this.nameClose} ${this.piClose}\"></div>`;\r\n            closeClass = ` ${this.nameAlert + this.modSep + this.nameClose}`;\r\n        }\r\n        // Produce the alert content\r\n        let content = `<div class=\"${this.nameAlert + colorClass + statusClass + closeClass} ${this.nameAnimation}\" style=\"animation-name:${enter}; --animation-duration: ${duration}ms;\">`;\r\n        content += statusCode;\r\n        content += `<div class=\"${this.nameAlert + this.chiSep + this.nameContent}\">`;\r\n        content += text;\r\n        content += '</div>';\r\n        content += closeCode;\r\n        content += '</div>';\r\n        // Create the parent\r\n        const parent = document.querySelector(`#${this.nameAlert + '-' + this.nameBlueprint}`);\r\n        // Create the node\r\n        const element = document.createElement('div');\r\n        // Modify the node\r\n        element.classList.add(this.nameAlert + this.parSep + this.nameControl, this.nameAnimation);\r\n        element.style.cssText = `--animation-duration: ${duration}ms; --animation-height: 4.5rem;`;\r\n        element.innerHTML = content;\r\n        // Append the node to the parent\r\n        parent.appendChild(element);\r\n        // Find the child node\r\n        const child = element.querySelector(`.${this.nameAlert}`);\r\n        // Set animation exit timeout\r\n        let timeout = setTimeout(() => {\r\n            this.animation(child, exit);\r\n            timeout = setTimeout(() => {\r\n                this.animation(element, this.hideYAnimation).then(() => {\r\n                    element.remove();\r\n                });\r\n            }, delay);\r\n        }, this.hideTimeout);\r\n        // Set animation exit on click\r\n        if (element.querySelector(`.${this.nameAlert + this.chiSep + this.nameClose}`)) {\r\n            element.querySelector(`.${this.nameAlert + this.chiSep + this.nameClose}`).onclick = () => {\r\n                clearTimeout(timeout);\r\n                this.animation(child, exit);\r\n                timeout = setTimeout(() => {\r\n                    this.animation(element, this.hideYAnimation).then(() => {\r\n                        element.remove();\r\n                    });\r\n                }, delay);\r\n            };\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Alerts.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Alerts } from \"./Alerts\";\r\n/**\r\n * @desc Used for setting modal\r\n */\r\nexport class Modal extends Alerts {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Sets modal to modal__container#modal-blueprint\r\n     *\r\n     * @param {string} title     -- Modal title\r\n     * @param {string} body      -- Modal body\r\n     * @param {string} footer    -- Modal footer\r\n     * @param {string} size      -- Modal size (xs, sm, md, lg, xl)\r\n     * @param {string} enter     -- Modal animation enter\r\n     * @param {string} exit      -- Modal animation exit\r\n     * @param {string} color     -- Modal color:  light | dark\r\n     * @param {boolean} close    -- Closable modal: true | false\r\n     * @param {boolean} backdrop -- Has backdrop: true | false\r\n     * @param {number} duration  -- Modal animation duration: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    modal(title, body, footer = \"\", size = \"xs\", enter = \"fadeIn\", exit = \"fadeOut\", color = \"\", close = true, backdrop = true, duration = 500) {\r\n        // Check size\r\n        let sizeCLass = \"\";\r\n        if (this.polarisSizes.includes(size)) {\r\n            sizeCLass = ` ${this.nameModal + this.modSep + size}`;\r\n        }\r\n        else if (size) {\r\n            sizeCLass = ` ${size}`;\r\n        }\r\n        else {\r\n            sizeCLass = ` ${this.nameWidth}-100`;\r\n        }\r\n        // Set the color class\r\n        let colorClass = \"\";\r\n        if (color === \"light\") {\r\n            colorClass = ` ${this.nameModal + this.modSep + color}`;\r\n        }\r\n        // Check the closable\r\n        let closeCode = \"\";\r\n        if (close) {\r\n            closeCode = `<div class=\"${this.nameModal + this.chiSep + this.nameClose} ${this.piClose}\"></div>`;\r\n        }\r\n        // Check footer\r\n        let footerCode = \"\";\r\n        if (footer) {\r\n            footerCode = `<footer class=\"${this.nameModal + this.chiSep + this.nameFooter}\">${footer}</main>`;\r\n        }\r\n        // Produce the modal content\r\n        let content = `<div class=\"${this.nameModal + sizeCLass + colorClass} ${this.nameAnimation} scroll scroll-sm scroll-radius-sm\" style=\"animation-name:${enter}; --animation-duration: ${duration}ms;\">`;\r\n        content += closeCode;\r\n        content += `<header class=\"${this.nameModal + this.chiSep + this.nameHeader}\">`;\r\n        content += `<h1>${title}</h1>`;\r\n        content += '</header>';\r\n        content += `<main class=\"${this.nameModal + this.chiSep + this.nameBody}\">`;\r\n        content += body;\r\n        content += '</main>';\r\n        content += footerCode;\r\n        content += '</div>';\r\n        // Find the parent\r\n        const parent = document.querySelector(`#${this.nameModal + '-' + this.nameBlueprint}`);\r\n        // Find the backdrop\r\n        const bdrop = document.querySelector(`.${this.nameBackdrop}`);\r\n        // Create the node\r\n        const element = document.createElement('div');\r\n        // Append the node to the parent\r\n        parent.appendChild(element);\r\n        // Modify the node\r\n        element.outerHTML = content;\r\n        // Find the child node\r\n        const child = parent.querySelector(`.${this.nameModal}`);\r\n        // Hide the scrollbar\r\n        let bodyElement = document.querySelector('body');\r\n        bodyElement.style.paddingRight = this.scrollWidth() + \"px\";\r\n        bodyElement.style.overflow = \"hidden\";\r\n        // Show the backdrop\r\n        if (backdrop) {\r\n            this.animation(bdrop, this.fadeInAnimation);\r\n        }\r\n        // Show the parent\r\n        this.animation(parent, this.fadeInAnimation);\r\n        // Set animation exit on click\r\n        if (child.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`)) {\r\n            child.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`).onclick = () => {\r\n                // Hide the backdrop\r\n                if (backdrop) {\r\n                    this.animation(bdrop, this.fadeOutAnimation);\r\n                }\r\n                // Show the scrollbar\r\n                setTimeout(() => {\r\n                    bodyElement.style.paddingRight = \"\";\r\n                    bodyElement.style.overflow = \"\";\r\n                }, duration / 2);\r\n                // Hide the child\r\n                this.animation(child, exit).then(() => {\r\n                    // Remove the child\r\n                    child.remove();\r\n                    // Hide the parent\r\n                    this.animation(parent, this.fadeOutAnimation);\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets custom modal to custom modal__container\r\n     *\r\n     * @param {string|object} parent -- Modal container selector or object\r\n     * @param {string} enter         -- Modal animation enter\r\n     * @param {string} exit          -- Modal animation exit\r\n     * @param {boolean} backdrop     -- Has backdrop: true | false\r\n     * @param {number} duration      -- Modal animation duration: number in miliseconds\r\n     *\r\n     * @return {void}\r\n     */\r\n    setModal(parent, enter = \"fadeIn\", exit = \"fadeOut\", backdrop = true, duration = 500) {\r\n        // Find the parent\r\n        let parentNode;\r\n        if (typeof (parent) === \"string\")\r\n            parentNode = document.querySelector(parent);\r\n        else if (typeof (parent) === \"object\")\r\n            parentNode = parent;\r\n        // Find the modal\r\n        const modal = parentNode.querySelector(`.${this.nameModal}`);\r\n        // Find the backdrop\r\n        const bdrop = document.querySelector(`.${this.nameBackdrop}`);\r\n        // Hide the scrollbar\r\n        let bodyElement = document.querySelector('body');\r\n        bodyElement.style.paddingRight = this.scrollWidth() + \"px\";\r\n        bodyElement.style.overflow = \"hidden\";\r\n        // Show the backdrop\r\n        if (backdrop) {\r\n            this.animation(bdrop, this.fadeInAnimation);\r\n        }\r\n        // Show the parent\r\n        this.animation(parentNode, this.fadeInAnimation);\r\n        // Show the modal\r\n        this.animation(modal, enter);\r\n        // Set animation exit on click\r\n        if (modal.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`)) {\r\n            modal.querySelector(`.${this.nameModal + this.chiSep + this.nameClose}`).onclick = () => {\r\n                // Hide the backdrop\r\n                if (backdrop) {\r\n                    this.animation(bdrop, this.fadeOutAnimation);\r\n                }\r\n                // Show the scrollbar\r\n                setTimeout(() => {\r\n                    bodyElement.style.paddingRight = \"\";\r\n                    bodyElement.style.overflow = \"\";\r\n                }, duration / 2);\r\n                // Hide the modal\r\n                this.animation(modal, exit).then(() => {\r\n                    // Hide the parent\r\n                    this.animation(parentNode, this.fadeOutAnimation);\r\n                });\r\n            };\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Modal.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Modal } from \"./Modal\";\r\n/**\r\n * @desc Used for handling components default behaviors\r\n */\r\nexport class Defaults extends Modal {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Document default classes\r\n     *\r\n     * @return {void}\r\n     */\r\n    docDefaults() {\r\n        let doc = document.querySelector('body');\r\n        // Check the document class \r\n        if (!doc.classList.contains(`${this.nameDoc}`)) {\r\n            doc.classList.add(`${this.nameDoc}`);\r\n        }\r\n        // Check the document color\r\n        if (!doc.classList.contains(`${this.nameDoc + this.modSep + this.nameLight}`) &&\r\n            !doc.classList.contains(`${this.nameDoc + this.modSep + this.nameDark}`)) {\r\n            // Color scheme\r\n            let scheme;\r\n            // Dark mode\r\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n                scheme = this.nameDark;\r\n            }\r\n            // Light mode\r\n            else {\r\n                scheme = this.nameLight;\r\n            }\r\n            // Set color scheme\r\n            doc.classList.add(`${this.nameDoc + this.modSep + scheme}`);\r\n            // Watch for changes\r\n            window.matchMedia('(prefers-color-scheme: dark)').onchange = (event => {\r\n                // Remove old scheme\r\n                this.removeClass(`.${this.nameDoc}`, `${this.nameDoc + this.modSep + scheme}`);\r\n                // Find new scheme\r\n                scheme = event.matches ? this.nameDark : this.nameLight;\r\n                // Set new color scheme\r\n                doc.classList.add(`${this.nameDoc + this.modSep + scheme}`);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles void links\r\n     *\r\n     * @return {void}\r\n     */\r\n    linkDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameVoid}`).length) {\r\n            document.querySelectorAll(`.${this.nameVoid}`).forEach((elem) => {\r\n                // Check element href\r\n                if (elem.getAttribute('href') === \"#\") {\r\n                    elem.setAttribute('href', 'javascript:void(0)');\r\n                }\r\n                // Prevent default behavior\r\n                // elem.onclick = () => {\r\n                //     return false;\r\n                // };\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets ripple animations if any available\r\n     *\r\n     * @return {void}\r\n     */\r\n    rippleDefaults() {\r\n        /**\r\n         *  Ripple animations\r\n         */\r\n        if (document.querySelectorAll(`.${this.nameRipple}`).length) {\r\n            // ripple\r\n            document.querySelectorAll(`.${this.nameRipple}[data-animation=${this.rippleAnimation}]`).forEach((elem) => {\r\n                elem.onclick = (event) => {\r\n                    let x = event.clientX, y = event.clientY;\r\n                    const REC = elem.getBoundingClientRect(), DIM = Math.sqrt(Math.pow(REC.width, 2) + Math.pow(REC.height, 2));\r\n                    // Unset the previous ripple animation\r\n                    elem.removeAttribute('data-animation');\r\n                    elem.offsetTop;\r\n                    // Set the new ripple animation\r\n                    elem.setAttribute('data-animation', this.rippleAnimation);\r\n                    elem.style.setProperty('--animation-dimension', DIM + 'px');\r\n                    elem.style.setProperty('--animation-left', x - REC.left + 'px');\r\n                    elem.style.setProperty('--animation-top', y - REC.top + 'px');\r\n                    // Set datasets and variables\r\n                    this.datasets(elem);\r\n                };\r\n            });\r\n            // rippleAuto\r\n            document.querySelectorAll(`.${this.nameRipple}[data-animation=${this.rippleAutoAnimation}]`).forEach((elem) => {\r\n                // Set datasets and variables\r\n                this.datasets(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles animation datasets if any available\r\n     *\r\n     * @return {void}\r\n     */\r\n    animationDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameAnimation}`).length) {\r\n            document.querySelectorAll(`.${this.nameAnimation}`).forEach((elem) => {\r\n                // Set CSS properties and variables\r\n                this.datasets(elem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles closable messages\r\n     *\r\n     * @return {void}\r\n     */\r\n    messageDefaults() {\r\n        if (document.querySelectorAll(`.${this.nameMessages + this.chiSep + this.nameClose}`).length) {\r\n            document.querySelectorAll(`.${this.nameMessages + this.chiSep + this.nameClose}`).forEach((elem) => {\r\n                elem.onclick = () => {\r\n                    let parent = elem.parentElement.parentElement;\r\n                    this.animation(parent, this.hideYAnimation).then(() => {\r\n                        parent.remove();\r\n                    });\r\n                };\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles clickable popups\r\n     *\r\n     * @return {void}\r\n     */\r\n    popupDefaults() {\r\n        if (document.querySelectorAll(`.${this.namePopup + this.parSep + this.nameControl}`).length) {\r\n            document.querySelectorAll(`.${this.namePopup + this.parSep + this.nameControl}`).forEach((elem) => {\r\n                // Check clickable\r\n                if (elem.querySelector(`.${this.namePopup + this.modSep + this.nameClick}`)) {\r\n                    elem.onclick = (i) => {\r\n                        // Popup component\r\n                        let popup = elem.querySelector(`.${this.namePopup + this.modSep + this.nameClick}`);\r\n                        // Ignore the click for component and its children(:not(.popup--close))\r\n                        let ignoreClick = false;\r\n                        elem.querySelectorAll(`.${this.namePopup} *:not(.${this.namePopup + this.chiSep + this.nameClose})`).forEach((j) => {\r\n                            if (i.target == j) {\r\n                                ignoreClick = true;\r\n                            }\r\n                        });\r\n                        // Check ignore click\r\n                        if (ignoreClick || i.target == popup)\r\n                            return;\r\n                        // Remove open class (hide popup)\r\n                        if (elem.querySelector(`.${this.namePopup + this.modSep + this.nameOpen}`)) {\r\n                            popup.classList.remove(`${this.namePopup + this.modSep + this.nameOpen}`);\r\n                        }\r\n                        // Add open class (show popup)\r\n                        else {\r\n                            popup.classList.add(`${this.namePopup + this.modSep + this.nameOpen}`);\r\n                        }\r\n                        // Prevent default behavior\r\n                        return false;\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles clickable and hoverable animated menu\r\n     *\r\n     * @return {void}\r\n     */\r\n    menuDefaults() {\r\n        // Clickable submenu\r\n        if (document.querySelectorAll(`.${this.nameMenu + this.chiSep + this.nameClick}`).length) {\r\n            document.querySelectorAll(`.${this.nameMenu + this.chiSep + this.nameClick}`).forEach((elem) => {\r\n                elem.querySelector(`.${this.nameMenu + this.chiSep + this.nameClick} a`).onclick = () => {\r\n                    // Submenu\r\n                    let submenu = elem.querySelector(`.${this.nameMenu + this.chiSep + this.nameClick} ul`);\r\n                    // Check animated submenu\r\n                    if (submenu.classList.contains(`${this.nameAnimation}`)) {\r\n                        let animationIn, animationOut;\r\n                        // Menu is open\r\n                        if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                            animationIn = \"fadeOut\";\r\n                            animationOut = \"fadeIn\";\r\n                            // Check data-exit\r\n                            if (submenu.getAttribute(\"data-exit\"))\r\n                                animationIn = submenu.getAttribute(\"data-exit\");\r\n                            // Check data-enter\r\n                            if (submenu.getAttribute(\"data-enter\"))\r\n                                animationOut = submenu.getAttribute(\"data-enter\");\r\n                        }\r\n                        // Menu is closed\r\n                        else {\r\n                            animationIn = \"fadeIn\";\r\n                            animationOut = \"fadeOut\";\r\n                            // Check data-enter\r\n                            if (submenu.getAttribute(\"data-enter\"))\r\n                                animationIn = submenu.getAttribute(\"data-enter\");\r\n                            // Check data-exit\r\n                            if (submenu.getAttribute(\"data-exit\"))\r\n                                animationOut = submenu.getAttribute(\"data-exit\");\r\n                        }\r\n                        // Check data-animation\r\n                        if (this.getStyle(submenu, 'animation-name') !== 'none') {\r\n                            if (this.getStyle(submenu, 'animation-name') == animationIn) {\r\n                                this.animation(submenu, animationOut);\r\n                            }\r\n                            else if (this.getStyle(submenu, 'animation-name') == animationOut) {\r\n                                this.animation(submenu, animationIn);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.animation(submenu, animationIn);\r\n                        }\r\n                    }\r\n                    // Remove open class (hide menu)\r\n                    else if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                        submenu.classList.remove(`${this.nameMenu + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                    // Add open class (show menu)\r\n                    else {\r\n                        submenu.classList.add(`${this.nameMenu + this.chiSep + this.nameOpen}`);\r\n                    }\r\n                    // Prevent default behavior\r\n                    return false;\r\n                };\r\n            });\r\n        }\r\n        // Hoverable animated submenu\r\n        if (document.querySelectorAll(`.${this.nameMenu} li:not(.${this.nameMenu + this.chiSep + this.nameClick})`).length) {\r\n            document.querySelectorAll(`.${this.nameMenu} li:not(.${this.nameMenu + this.chiSep + this.nameClick})`).forEach((elem) => {\r\n                // Submenu\r\n                let submenu = elem.querySelector(`.${this.nameMenu} li ul.${this.nameAnimation}`);\r\n                if (submenu) {\r\n                    let animationIn, animationOut;\r\n                    // Menu is open\r\n                    if (submenu.classList.contains(`${this.nameMenu + this.chiSep + this.nameOpen}`)) {\r\n                        animationIn = \"fadeOut\";\r\n                        animationOut = \"fadeIn\";\r\n                        // Check data-exit\r\n                        if (submenu.getAttribute(\"data-exit\"))\r\n                            animationIn = submenu.getAttribute(\"data-exit\");\r\n                        // Check data-enter\r\n                        if (submenu.getAttribute(\"data-enter\"))\r\n                            animationOut = submenu.getAttribute(\"data-enter\");\r\n                    }\r\n                    // Menu is closed\r\n                    else {\r\n                        animationIn = \"fadeIn\";\r\n                        animationOut = \"fadeOut\";\r\n                        // Check data-enter\r\n                        if (submenu.getAttribute(\"data-enter\"))\r\n                            animationIn = submenu.getAttribute(\"data-enter\");\r\n                        // Check data-exit\r\n                        if (submenu.getAttribute(\"data-exit\"))\r\n                            animationOut = submenu.getAttribute(\"data-exit\");\r\n                    }\r\n                    // Mouse over\r\n                    elem.onmouseover = () => {\r\n                        // Show submenu\r\n                        this.animation(submenu, animationIn).then();\r\n                    };\r\n                    // Mouse out\r\n                    elem.onmouseout = () => {\r\n                        // Hide submenu\r\n                        this.animation(submenu, animationOut);\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Defaults.js.map","/**\r\n * Import the parent Class\r\n */\r\nimport { Defaults } from \"./Defaults\";\r\n/**\r\n * @desc Used for loading component blueprints\r\n */\r\nexport class Blueprints extends Defaults {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor() {\r\n        // Inherit the parent class\r\n        super();\r\n    }\r\n    /**\r\n     * @desc Appends backdrop blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    backdropBlueprint() {\r\n        // Check backdrop blueprint\r\n        if (!document.querySelector(`#${this.nameBackdrop + '-' + this.nameBlueprint}`)) {\r\n            // Append backdrop blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameBackdrop, this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated], this.nameBackdrop + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Appends alert blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    alertBlueprint() {\r\n        // Check alert blueprint\r\n        if (!document.querySelector(`#${this.nameAlert + '-' + this.nameBlueprint}`)) {\r\n            // Append alert blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameAlert + this.parSep + this.nameContainer, this.nameAlert + this.parSep + this.nameContainer + this.modSep + this.alertPosition], this.nameAlert + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Append modal blueprint if not exists\r\n     *\r\n     * @return {void}\r\n     */\r\n    modalBlueprint() {\r\n        // Check modal blueprint\r\n        if (!document.querySelector(`#${this.nameModal + '-' + this.nameBlueprint}`)) {\r\n            // Append modal blueprint\r\n            this.append(\"div\", \"body\", \"\", [this.nameModal + this.parSep + this.nameContainer, this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated], this.nameModal + this.modSep + this.nameBlueprint);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Blueprints.js.map","/**\r\n * Import the Core Class\r\n */ \r\nimport {Core} from \"polaris-core/dist/js/modules/Core\";\r\n\r\n\r\n/**\r\n * Import Plugins\r\n */\r\nimport {Slideshow} from \"polaris-slideshow/dist/js/modules/Slideshow\";\r\n\r\n\r\n/**\r\n * Polaris object\r\n */\r\nconst Polaris = {\r\n    Core: Core,\r\n    Slideshow: Slideshow,\r\n}\r\n\r\n\r\n/**\r\n * Export default\r\n */\r\nexport default Polaris;","/**\r\n * Import the parent Class\r\n */\r\nimport { Blueprints } from \"./Blueprints\";\r\n/**\r\n * @desc Used for method chaining & initializing defaults & loading Blueprints\r\n */\r\nexport class Core extends Blueprints {\r\n    /**\r\n     * @desc Constructor method\r\n     */\r\n    constructor(node = null, mode = null) {\r\n        // Inherit the parent class\r\n        super();\r\n        // Initialize properties\r\n        this.node = node;\r\n        this.mode = mode;\r\n        // Check the selector\r\n        if (node && typeof (node) === \"string\") {\r\n            // Array node\r\n            if (mode === \"all\") {\r\n                this.node = document.querySelectorAll(node);\r\n            }\r\n            // Single node\r\n            else {\r\n                this.node = document.querySelector(node);\r\n            }\r\n            // Chain the node\r\n            this.chain();\r\n            return this;\r\n        }\r\n    }\r\n    /**\r\n     * @desc Used for method chaining\r\n     *\r\n     * @return {any}\r\n     */\r\n    chain() {\r\n        return this.node;\r\n    }\r\n    /**\r\n     * @desc addEventListener shorthand\r\n     *\r\n     * @param {string}   e  -- The event name\r\n     * @param {function} fn -- The callback function\r\n     *\r\n     * @return {Object}\r\n     */\r\n    event(e, fn) {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            this.node = this.node.addEventListener(e, () => fn());\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"event()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * @desc innerHTML simplified\r\n     *\r\n     * @param {string} content - The optional content\r\n     *\r\n     * @return {void | object}\r\n     */\r\n    html(content = \"\") {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            if (content) {\r\n                this.node.innerHTML = content;\r\n            }\r\n            else {\r\n                this.node = this.node.innerHTML;\r\n            }\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"html()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * @desc The objects length\r\n     *\r\n     * @return {number}\r\n     */\r\n    length() {\r\n        // Check the selector\r\n        if (typeof (this.node) === \"object\") {\r\n            // Prepare the result\r\n            this.node = this.node.length;\r\n            // Chain the result\r\n            return this.chain();\r\n        }\r\n        else {\r\n            throw `The method \"length()\" is only available if a selector passed into the class \"Polaris\".`;\r\n        }\r\n    }\r\n    /**\r\n     * Initializes the Polaris class\r\n     *\r\n     * @return {void}\r\n     */\r\n    init() {\r\n        /**\r\n         *  Load Defaults\r\n         */\r\n        /**\r\n         *  Document default classes\r\n         */\r\n        this.docDefaults();\r\n        /**\r\n         *  Void links\r\n         */\r\n        this.linkDefaults();\r\n        /**\r\n         *  Ripple animations\r\n         */\r\n        this.rippleDefaults();\r\n        /**\r\n         *  Animation datasets\r\n         */\r\n        this.animationDefaults();\r\n        /**\r\n         *  Closable messages\r\n         */\r\n        this.messageDefaults();\r\n        /**\r\n         *  Clickable & animated popups\r\n         */\r\n        this.popupDefaults();\r\n        /**\r\n         *  Clickable & animated menus\r\n         */\r\n        this.menuDefaults();\r\n        /**\r\n         *  Load Blueprints\r\n         */\r\n        /**\r\n         *  Backdrop blueprint\r\n         */\r\n        this.backdropBlueprint();\r\n        /**\r\n         *  Alert blueprint\r\n         */\r\n        this.alertBlueprint();\r\n        /**\r\n         *  Modal blueprint\r\n         */\r\n        this.modalBlueprint();\r\n    }\r\n}\r\n//# sourceMappingURL=Core.js.map","\"use strict\";\r\n/**\r\n * Dependencies\r\n */\r\nimport { Animations } from \"polaris-core/dist/js/modules/Animations\";\r\n/**\r\n * @desc The Slideshow class for handling slideshow componet and its slides\r\n */\r\nexport class Slideshow extends Animations {\r\n    /**\r\n     * @desc Constructor method\r\n     *\r\n     * @param {string|HTMLElement} slideshow -- The required slideshow selector\r\n     * @param {object}             options   -- The optional slideshow options\r\n     */\r\n    constructor(slideshow, options = {}) {\r\n        // Inherit the parent class\r\n        super();\r\n        /**\r\n         * @desc Class properties\r\n         */\r\n        // Name keys\r\n        this.nameSlideshow = 'slideshow';\r\n        this.nameSlideshowItem = 'item';\r\n        this.nameSlideshowMedia = 'media';\r\n        this.nameSlideshowOverlays = 'overlays';\r\n        this.nameSlideshowOverlay = 'overlay';\r\n        this.nameSlideshowCaptions = 'captions';\r\n        this.nameSlideshowCaption = 'caption';\r\n        this.nameSlideshowOption = 'option';\r\n        this.nameSlideshowProgress = 'progress';\r\n        this.nameSlideshowCounter = 'counter';\r\n        this.nameSlideshowPrev = 'prev';\r\n        this.nameSlideshowNext = 'next';\r\n        this.nameSlideshowDots = 'dots';\r\n        this.nameSlideshowFilter = 'filter';\r\n        // Slideshow selectors\r\n        this.slideshow = null;\r\n        this.slideshowItems = null;\r\n        this.slideshowMedias = null;\r\n        this.slideshowProgress = null;\r\n        this.slideshowCounter = null;\r\n        this.slideshowPrev = null;\r\n        this.slideshowNext = null;\r\n        this.slideshowDots = null;\r\n        // Private properties\r\n        this.itemsCount = 0;\r\n        this.activeItem = null;\r\n        this.activeDot = null;\r\n        this.activeIndex = 0;\r\n        this.animationEnter = this.fadeInAnimation;\r\n        this.animationExit = this.fadeOutAnimation;\r\n        this.slideInterval = null;\r\n        this.timerInterval = null;\r\n        this.pauseIntervals = false;\r\n        this.remainingTime = 0;\r\n        this.sliding = false;\r\n        this.firstLoad = true;\r\n        this.mediaLoaded = false;\r\n        // Default options\r\n        this.mediaShrink = true;\r\n        this.isAutoplay = false;\r\n        this.hoverPause = false;\r\n        this.timeout = 6000;\r\n        this.hasProgress = false;\r\n        this.hasCounter = false;\r\n        this.hasControls = true;\r\n        this.hasDots = false;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.slideshowColor = 'auto';\r\n        this.mediaFilter = null;\r\n        this.mediaControls = true;\r\n        this.mediaAutoplay = false;\r\n        // Slideshow options\r\n        this.options = {\r\n            \"mediaShrink\": this.mediaShrink,\r\n            'isAutoplay': this.isAutoplay,\r\n            'hoverPause': this.hoverPause,\r\n            'timeout': this.timeout,\r\n            'hasProgress': this.hasProgress,\r\n            'hasCounter': this.hasCounter,\r\n            'hasControls': this.hasControls,\r\n            'hasDots': this.hasDots,\r\n            'round': false,\r\n            'width': null,\r\n            'height': null,\r\n            'color': this.slideshowColor,\r\n            'mediaControls': this.mediaControls,\r\n            'mediaAutoplay': this.mediaAutoplay,\r\n            'mediaFilter': this.mediaFilter,\r\n            'phoneHeight': null,\r\n            'tabletHeight': null,\r\n            'desktopHeight': null,\r\n            'mediaEnter': null,\r\n            'mediaExit': null,\r\n            'mediaEnterPrev': null,\r\n            'mediaExitPrev': null,\r\n            'mediaEnterNext': null,\r\n            'mediaExitNext': null,\r\n            'overlayEnter': null,\r\n            'overlayExit': null,\r\n            'overlayEnterPrev': null,\r\n            'overlayExitPrev': null,\r\n            'overlayEnterNext': null,\r\n            'overlayExitNext': null,\r\n            'captionEnter': null,\r\n            'captionExit': null,\r\n            'captionEnterPrev': null,\r\n            'captionExitPrev': null,\r\n            'captionEnterNext': null,\r\n            'captionExitNext': null,\r\n            'counterPosition': null,\r\n            'dotsPosition': null,\r\n            'captionsPosition': null,\r\n            'overlaysPosition': null,\r\n        };\r\n        // Valid slideshow selector\r\n        if (this.exist(slideshow)['status']) {\r\n            // String slideshow selector\r\n            if (typeof (slideshow) === \"string\") {\r\n                this.slideshow = document.querySelector(slideshow);\r\n            }\r\n            // HTMLElement slideshow selector\r\n            else if (typeof (slideshow) === \"object\") {\r\n                this.slideshow = slideshow;\r\n            }\r\n            // Set slideshow items\r\n            this.slideshowItems = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}`);\r\n            this.itemsCount = this.slideshowItems.length;\r\n            // No slide\r\n            if (this.itemsCount == 0) {\r\n                throw 'No slide found!';\r\n            }\r\n            // Set items media\r\n            this.slideshowMedias = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n            // Update options\r\n            if (options)\r\n                this.options = options;\r\n            // Check options\r\n            if (!('mediaShrink' in this.options))\r\n                this.options['mediaShrink'] = this.mediaShrink;\r\n            if (!('isAutoplay' in this.options))\r\n                this.options['isAutoplay'] = this.isAutoplay;\r\n            if (!('hoverPause' in this.options))\r\n                this.options['hoverPause'] = this.hoverPause;\r\n            if (!('timeout' in this.options))\r\n                this.options['timeout'] = this.timeout;\r\n            if (!('hasProgress' in this.options))\r\n                this.options['hasProgress'] = this.hasProgress;\r\n            if (!('hasCounter' in this.options))\r\n                this.options['hasCounter'] = this.hasCounter;\r\n            if (!('hasControls' in this.options))\r\n                this.options['hasControls'] = this.hasControls;\r\n            if (!('hasDots' in this.options))\r\n                this.options['hasDots'] = this.hasDots;\r\n            if (!('mediaControls' in this.options))\r\n                this.options['mediaControls'] = this.mediaControls;\r\n            if (!('mediaAutoplay' in this.options))\r\n                this.options['mediaAutoplay'] = this.mediaAutoplay;\r\n            if (!('color' in this.options))\r\n                this.options['color'] = this.slideshowColor;\r\n            if (!('mediaFilter' in this.options))\r\n                this.options['mediaFilter'] = this.mediaFilter;\r\n            // Start the slideshow\r\n            this.start();\r\n        }\r\n        // Invalid slideshow selector\r\n        else {\r\n            throw 'The \"slideshow\" property of the Slideshow class cannot be empty or null!';\r\n        }\r\n    }\r\n    /**\r\n     * @desc Starts the Slideshow\r\n     *\r\n     * @return {void}\r\n     */\r\n    start() {\r\n        // Set items\r\n        this.setItems();\r\n        // Set options\r\n        this.setOptions();\r\n        // Previous Slide\r\n        this.prevSlide();\r\n        // Next Slide\r\n        this.nextSlide();\r\n        // Dots Slide\r\n        this.dotSlide();\r\n        // Slideshow events\r\n        this.slideEvents();\r\n        /**\r\n         *  Set the deault slide\r\n         */\r\n        let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                this.setSlide(0);\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n    }\r\n    /**\r\n     * @desc Sets Slideshow items\r\n     *\r\n     * @var {HTMLElement}   media       -- The items media\r\n     * @var {HTMLElement[]} overlays    -- The items overlays\r\n     * @var {HTMLElement[]} captions    -- The items captions\r\n     *\r\n     * @return {void}\r\n     */\r\n    setItems() {\r\n        // Loop items\r\n        for (let i = 0; i < this.itemsCount; i++) {\r\n            // Set data-index\r\n            this.slideshowItems[i].dataset.index = i;\r\n            // Item media\r\n            if (this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`)) {\r\n                const media = this.slideshowItems[i].querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                // Add animation, animation-animated classList\r\n                this.addClasses(media, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                // Set content for the media\r\n                this.setContent(media, 'media');\r\n                // Set the default slide active class\r\n                if (i == 0) {\r\n                    // Set the active class\r\n                    this.activeItem = this.slideshowItems[0];\r\n                    // Add active class to slide\r\n                    this.addClass(this.activeItem, this.nameActive);\r\n                }\r\n                // Set default --animation\r\n                media.style.setProperty('--animation', 'none');\r\n            }\r\n            // Item overlays\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`).length) {\r\n                const overlays = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                // Set item overlays\r\n                overlays.forEach((overlay) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(overlay, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                    // Set content for overlays\r\n                    this.setContent(overlay);\r\n                    // Set default --animation\r\n                    overlay.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n            // Item captions\r\n            if (this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`).length) {\r\n                const captions = this.slideshowItems[i].querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n                // Set item captions\r\n                captions.forEach((caption) => {\r\n                    // Add animation, animation-animated classList\r\n                    this.addClasses(caption, [this.nameAnimation, this.nameAnimation + this.modSep + this.nameAnimated]);\r\n                    // Set default --animation\r\n                    caption.style.setProperty('--animation', 'none');\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Extract extension from a file name\r\n     *\r\n     * @param {string} file -- The file name to process\r\n     *\r\n     * @var {string} ext -- The file extension\r\n     * @var {array}  arr -- The file string array\r\n     *\r\n     * @return {string}\r\n     */\r\n    fileExtension(file) {\r\n        let ext = '';\r\n        let arr = [];\r\n        // Set file array\r\n        arr = file.split('.');\r\n        // Set extension\r\n        ext = '.' + arr[arr.length - 1];\r\n        // Return the extracted extension\r\n        return ext;\r\n    }\r\n    /**\r\n     * @desc Sets the slide content\r\n     *\r\n     * @param {HTMLElement} node -- The node to set content for\r\n     *\r\n     * @var {HTMLElement} inner    -- The inner media element\r\n     * @var {string}      maxWidth -- Media images max-width\r\n     * @var {string}      alt      -- The image alternative text\r\n     * @var {string}      ext      -- The media extension\r\n     * @var {string}      type     -- The media MIME type\r\n     * @var {string}      controls -- The video controls\r\n     * @var {string}      muted    -- The muted video\r\n     *\r\n     * @return {void}\r\n     */\r\n    setContent(node, mode = null) {\r\n        let inner, index = 0, maxWidth = '', alt = '', ext = '', type = '', controls = '', muted = '';\r\n        // Check mode\r\n        if (mode == 'media') {\r\n            // Find index\r\n            index = Number(node.parentElement.dataset.index);\r\n            // Find extension\r\n            if (node.dataset.src)\r\n                ext = this.fileExtension(node.dataset.src);\r\n            // Check mediaControls\r\n            if (this.options['mediaControls'])\r\n                controls = ' controls';\r\n        }\r\n        // Media max-width\r\n        if (this.options['mediaShrink'])\r\n            maxWidth = ' style=\"max-width: inherit;\"';\r\n        // Image\r\n        if (node.dataset.type == 'image') {\r\n            // Check type\r\n            if (!['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg'].includes(ext)) {\r\n                throw `Unsupported image extension detected! \\nSupported image extensions are: ['.webp', '.jpg', '.jpeg', '.apng', '.png', '.avif', '.gif', '.svg']`;\r\n            }\r\n            // Check alternative text\r\n            if (node.dataset.alt)\r\n                alt = ` alt=\"${node.dataset.alt}\"`;\r\n            // Set node content\r\n            node.innerHTML = `<img src=\"${node.dataset.src}\"${alt + maxWidth}>`;\r\n            // Set inner node\r\n            inner = node.querySelector('img');\r\n        }\r\n        // Video\r\n        else if (node.dataset.type == 'video') {\r\n            // Produce file type\r\n            if (ext == '.mp4')\r\n                type = 'video/mp4';\r\n            else if (ext == '.webm')\r\n                type = 'video/webm';\r\n            else\r\n                type = '';\r\n            // Check type\r\n            if (!type) {\r\n                throw `Unsupported video extension detected! \\nSupported video extensions are: ['.mp4', '.webm']`;\r\n            }\r\n            // Check autoplay\r\n            if (this.options['mediaAutoplay']) {\r\n                muted = ' muted loop';\r\n            }\r\n            // Set node content\r\n            node.innerHTML = `<video preload=\"metadata\"${controls + muted + maxWidth}><source src=\"${node.dataset.src}\" type=\"${type}\"></video>`;\r\n            // Set inner node\r\n            inner = node.querySelector('video');\r\n        }\r\n        // HTML\r\n        else if (node.dataset.type == 'html') {\r\n            // Set node content\r\n            if (node.dataset.html)\r\n                node.innerHTML = node.dataset.html;\r\n            // Set inner node\r\n            if (node.firstElementChild)\r\n                inner = node.firstElementChild;\r\n            else\r\n                inner = node;\r\n        }\r\n        // Unknown\r\n        else {\r\n            throw 'Unsupported media format detected!';\r\n        }\r\n        // Check heigts\r\n        if (this.options['height'] || this.options['phoneHeight'] || this.options['tabletHeight'] || this.options['desktopHeight']) {\r\n            if (this.options['mediaShrink'])\r\n                inner.style.maxHeight = '100%';\r\n        }\r\n        // Media mode        \r\n        if (mode == 'media') {\r\n            // Fetch inner size after loading\r\n            // Image\r\n            if (node.dataset.type == 'image') {\r\n                inner.onload = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.naturalWidth > this.width)\r\n                        this.width = inner.naturalWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width)\r\n                        this.width = inner.getBoundingClientRect().width;\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Video\r\n            else if (node.dataset.type == 'video') {\r\n                inner.onloadedmetadata = () => {\r\n                    // Set the default width\r\n                    if (!this.options['width'] && inner.clientWidth > this.width)\r\n                        this.width = inner.clientWidth;\r\n                    if (!this.options['width'] && inner.getBoundingClientRect().width > this.width)\r\n                        this.width = inner.getBoundingClientRect().width;\r\n                    // Set the default height\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                };\r\n            }\r\n            // Others\r\n            else {\r\n                setTimeout(() => {\r\n                    // Fully loaded\r\n                    if (index + 1 == this.itemsCount)\r\n                        this.mediaLoaded = true;\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets Slideshow options\r\n     *\r\n     * @var {string}      controlsContent -- Slideshow controls (prev & next) HTML content\r\n     * @var {string}      dotsContent     -- Slideshow dots HTML content\r\n     * @var {HTMLElement} dots            -- Dots parent (container)\r\n     * @var {HTMLElement} captions        -- Captions parent (container)\r\n     * @var {HTMLElement} overlays        -- Overlays parent (container)\r\n     * @var {number}      windowWidth     -- Window available width\r\n     * @var {HTMLElement} inner           -- The inner media element\r\n     * @var {function}    interval        -- Slideshow size interval\r\n     * @var {string[]}    filterCls       -- the filter class list\r\n     *\r\n     * @return {void|boolean}\r\n     */\r\n    setOptions() {\r\n        /**\r\n         *  Single & Multiple slide\r\n         */\r\n        if (this.itemsCount >= 1) {\r\n            // Check progress\r\n            if (this.options['hasProgress']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`)) {\r\n                    this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowProgress]);\r\n                }\r\n            }\r\n            // Check counter\r\n            if (this.options['hasCounter']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`)) {\r\n                    this.append(\"div\", this.slideshow, \"\", [this.nameSlideshow + this.chiSep + this.nameSlideshowCounter]);\r\n                }\r\n            }\r\n            // Check controls\r\n            if (this.options['hasControls']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`)) {\r\n                    const controlsContent = '&#10094;';\r\n                    this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowPrev]);\r\n                }\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`)) {\r\n                    const controlsContent = '&#10095;';\r\n                    this.append(\"div\", this.slideshow, controlsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowNext]);\r\n                }\r\n            }\r\n            // Check dots\r\n            if (this.options['hasDots']) {\r\n                if (!this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`)) {\r\n                    let dotsContent = '';\r\n                    for (let i = 0; i < this.itemsCount; i++) {\r\n                        this.slideshowItems[i].dataset.index = i;\r\n                        dotsContent += `<li data-index=\"${i}\"></li>`;\r\n                    }\r\n                    this.append(\"ul\", this.slideshow, dotsContent, [this.nameSlideshow + this.chiSep + this.nameSlideshowDots]);\r\n                }\r\n            }\r\n            // Update slide items\r\n            this.slideshowProgress = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowProgress}`);\r\n            this.slideshowCounter = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCounter}`);\r\n            this.slideshowPrev = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowPrev}`);\r\n            this.slideshowNext = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowNext}`);\r\n            this.slideshowDots = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li`);\r\n            // Set the default dot\r\n            if (this.slideshowDots.length) {\r\n                // Set the active class\r\n                this.addClass(this.slideshowDots[0], this.nameActive);\r\n                // Update the active dot\r\n                this.activeDot = this.slideshowDots[0];\r\n            }\r\n        }\r\n        /**\r\n         *  Single slide\r\n         */\r\n        if (this.itemsCount == 1) {\r\n            // Hide progress & controls\r\n            this.slideshowProgress.style.display = 'none';\r\n            this.slideshowPrev.style.display = 'none';\r\n            this.slideshowNext.style.display = 'none';\r\n            // Hide dots parent\r\n            this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`).style.display = 'none';\r\n        }\r\n        /**\r\n         *  Set slideshow width, height\r\n         */\r\n        let interval = setInterval(() => {\r\n            // Fully loaded\r\n            if (this.mediaLoaded) {\r\n                /**\r\n                 * Slideshow width\r\n                 */\r\n                // Check width property\r\n                if (this.options['width'])\r\n                    this.width = this.options['width'];\r\n                // Set slideshow width\r\n                if (this.options['width'])\r\n                    this.slideshow.style.maxWidth = this.options['width'];\r\n                else\r\n                    this.slideshow.style.maxWidth = this.width + 'px';\r\n                /**\r\n                 * Slideshow height\r\n                 */\r\n                // Check height property\r\n                if (this.options['height'])\r\n                    this.height = this.options['height'];\r\n                else if (this.height > window.innerHeight)\r\n                    this.height = window.innerHeight;\r\n                // Window width\r\n                const windowWidth = window.innerWidth;\r\n                // Desktop\r\n                if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                    this.slideshow.style.height = this.options['desktopHeight'];\r\n                }\r\n                // Tablet\r\n                else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                    this.slideshow.style.height = this.options['tabletHeight'];\r\n                }\r\n                // Smartphone\r\n                else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                    this.slideshow.style.height = this.options['phoneHeight'];\r\n                }\r\n                // All devices\r\n                else {\r\n                    if (this.options['height'])\r\n                        this.slideshow.style.height = this.options['height'];\r\n                    else\r\n                        this.slideshow.style.height = this.height + 'px';\r\n                }\r\n                // Clear the interval\r\n                clearInterval(interval);\r\n            }\r\n        }, 10);\r\n        /**\r\n         *  Set slideshow color\r\n         */\r\n        if (this.options['color'] && this.options['color'] != 'auto') {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.options['color']);\r\n        }\r\n        /**\r\n         *  Set slideshow filter\r\n         */\r\n        if (this.options['mediaFilter']) {\r\n            let filterCls;\r\n            // Produce the filter class list\r\n            if (this.options['mediaFilter'] == 'auto')\r\n                filterCls = [this.nameSlideshow + this.chiSep + this.nameSlideshowFilter];\r\n            else\r\n                filterCls = [this.nameSlideshow + this.chiSep + this.nameSlideshowFilter, this.nameSlideshow + this.chiSep + this.nameSlideshowFilter + this.modSep + this.options['mediaFilter']];\r\n            // Append the filter\r\n            this.append('div', this.slideshow, '', filterCls);\r\n        }\r\n        /**\r\n         *  Set slideshow roundness\r\n         */\r\n        if (this.options['round']) {\r\n            this.addClass(this.slideshow, this.nameSlideshow + this.modSep + this.nameRadius);\r\n        }\r\n        /**\r\n         *  Set slideshow positions\r\n         */\r\n        // Conter position\r\n        if (this.options['counterPosition']) {\r\n            // Check element existence\r\n            if (this.slideshowCounter) {\r\n                // Unset default positions\r\n                this.slideshowCounter.style.inset = \"unset\";\r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['counterPosition'])) {\r\n                    this.slideshowCounter.style.margin = \"1rem\";\r\n                }\r\n                // Add position class\r\n                this.addClass(this.slideshowCounter, this.namePosition + this.modSep + this.options['counterPosition']);\r\n            }\r\n        }\r\n        // Dots position\r\n        if (this.options['dotsPosition']) {\r\n            const dots = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots}`);\r\n            // Check element existence\r\n            if (dots) {\r\n                // Unset default positions\r\n                dots.style.inset = \"unset\";\r\n                // Set alternative margin\r\n                if (['top', 'bottom'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem 0\";\r\n                }\r\n                else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['dotsPosition'])) {\r\n                    dots.style.margin = \"1rem\";\r\n                }\r\n                // Add position class\r\n                this.addClass(dots, this.namePosition + this.modSep + this.options['dotsPosition']);\r\n            }\r\n        }\r\n        // Captions position\r\n        if (this.options['captionsPosition']) {\r\n            const captions = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaptions}`);\r\n            // Check element existence\r\n            if (captions.length) {\r\n                captions.forEach((caption) => {\r\n                    // Unset default positions\r\n                    caption.style.inset = \"unset\";\r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['captionsPosition'])) {\r\n                        caption.style.margin = \"1rem\";\r\n                    }\r\n                    // Add position class\r\n                    this.addClass(caption, this.namePosition + this.modSep + this.options['captionsPosition']);\r\n                });\r\n            }\r\n        }\r\n        // Overlays position\r\n        if (this.options['overlaysPosition']) {\r\n            const overlays = this.slideshow.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlays}`);\r\n            // Check element existence\r\n            if (overlays.length) {\r\n                overlays.forEach((overlay) => {\r\n                    // Unset default positions\r\n                    overlay.style.inset = \"unset\";\r\n                    // Set alternative margin\r\n                    if (['top', 'bottom'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem 0\";\r\n                    }\r\n                    else if (['top-left', 'left', 'bottom-left', 'top-right', 'right', 'bottom-right'].includes(this.options['overlaysPosition'])) {\r\n                        overlay.style.margin = \"1rem\";\r\n                    }\r\n                    // Add position class\r\n                    this.addClass(overlay, this.namePosition + this.modSep + this.options['overlaysPosition']);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles prev control click\r\n     *\r\n     * @var {number} index -- Previous slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    prevSlide() {\r\n        if (this.options['hasControls']) {\r\n            this.slideshowPrev.onclick = () => {\r\n                // Find previous index\r\n                let index = this.activeIndex - 1;\r\n                // Check index\r\n                if (index < 0)\r\n                    index = this.itemsCount - 1;\r\n                // Set slide\r\n                this.setSlide(index, 'previous');\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles next control click\r\n     *\r\n     * @var {number} index -- Next slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    nextSlide() {\r\n        if (this.options['hasControls']) {\r\n            this.slideshowNext.onclick = () => {\r\n                // Find next index\r\n                let index = this.activeIndex + 1;\r\n                // Check index\r\n                if (index >= this.itemsCount)\r\n                    index = 0;\r\n                // Set slide\r\n                this.setSlide(index, 'next');\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles dots click\r\n     *\r\n     * @var {number} index -- Clicked slide index\r\n     *\r\n     * @return {void}\r\n     */\r\n    dotSlide() {\r\n        if (this.options['hasDots']) {\r\n            this.slideshowDots.forEach((dot) => {\r\n                dot.onclick = () => {\r\n                    // Find index\r\n                    let index = Number(dot.dataset.index);\r\n                    // Set slide\r\n                    if (index != this.activeIndex)\r\n                        this.setSlide(index);\r\n                };\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles automatic slide\r\n     *\r\n     * @param {number} timeout -- Slideshow timeout\r\n     *\r\n     * @var   {number} remain  -- Remaining time\r\n     *\r\n     * @return {void}\r\n     */\r\n    autoSlide(timeout = 0) {\r\n        if (this.options['isAutoplay']) {\r\n            let remain;\r\n            // Set remain time\r\n            if (timeout)\r\n                remain = timeout;\r\n            else\r\n                remain = this.options['timeout'];\r\n            // Set slide interval\r\n            this.slideInterval = setInterval(() => {\r\n                // Set next slide\r\n                if (!this.pauseIntervals)\r\n                    this.slideshowNext.click();\r\n            }, remain);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles slideshow hover events\r\n     *\r\n     * @return {void}\r\n     */\r\n    hoverEvents() {\r\n        // On hover\r\n        this.slideshow.onmouseover = () => {\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n        };\r\n        // On leave hover\r\n        this.slideshow.onmouseleave = () => {\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n    }\r\n    /**\r\n     * @desc Handles slideshow window events\r\n     *\r\n     * @var {number}      windowWidth -- Window available width\r\n     * @var {HTMLElement} inner       -- The inner media element\r\n     *\r\n     * @return {void}\r\n     */\r\n    windowEvents() {\r\n        // Leave window\r\n        window.onblur = () => {\r\n            // Pause the media\r\n            // Video\r\n            if (this.activeItem.querySelector('video'))\r\n                this.activeItem.querySelector('video').pause();\r\n            // Audio\r\n            if (this.activeItem.querySelector('audio'))\r\n                this.activeItem.querySelector('audio').pause();\r\n            // Pause the interval\r\n            this.pauseIntervals = true;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n        };\r\n        // Show window\r\n        window.onfocus = () => {\r\n            // Reload the media\r\n            if (this.options['mediaAutoplay']) {\r\n                // Video\r\n                if (this.activeItem.querySelector('video')) {\r\n                    this.activeItem.querySelector('video').play();\r\n                }\r\n                // Audio\r\n                if (this.activeItem.querySelector('audio')) {\r\n                    this.activeItem.querySelector('audio').play();\r\n                }\r\n            }\r\n            // Resume the interval\r\n            this.pauseIntervals = false;\r\n            // Clear the interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Rerun the slideshow with the remaining time\r\n            this.autoSlide(this.remainingTime);\r\n            // Rerun the slide timer\r\n            this.slideTimer();\r\n        };\r\n        // Window resize\r\n        window.onresize = () => {\r\n            // Reset height\r\n            this.height = 0;\r\n            // Check items media\r\n            this.slideshowMedias.forEach((media) => {\r\n                // Inner element\r\n                if (media.firstElementChild) {\r\n                    const inner = media.firstElementChild;\r\n                    // Set height property\r\n                    if (!this.options['height'] && inner.clientHeight > this.height)\r\n                        this.height = inner.clientHeight;\r\n                    if (!this.options['height'] && this.height > window.innerHeight)\r\n                        this.height = window.innerHeight;\r\n                    // if (!this.options['height'] && inner.getBoundingClientRect().height > this.height) this.height = inner.getBoundingClientRect().height;\r\n                }\r\n                // Only text\r\n                else {\r\n                    // Set height property\r\n                    if (!this.options['height'] && media.getBoundingClientRect().height > this.height)\r\n                        this.height = media.getBoundingClientRect().height;\r\n                }\r\n            });\r\n            /**\r\n             * Slideshow height\r\n             */\r\n            // Check height property\r\n            if (this.options['height'])\r\n                this.height = this.options['height'];\r\n            // Window width\r\n            const windowWidth = window.innerWidth;\r\n            // Desktop\r\n            if (windowWidth >= this.desktopWidth && this.options['desktopHeight']) {\r\n                this.slideshow.style.height = this.options['desktopHeight'];\r\n            }\r\n            // Tablet\r\n            else if (windowWidth < this.desktopWidth && windowWidth >= this.tabletWidth && this.options['tabletHeight']) {\r\n                this.slideshow.style.height = this.options['tabletHeight'];\r\n            }\r\n            // Smartphone\r\n            else if (windowWidth < this.tabletWidth && windowWidth >= this.phoneWidth && this.options['phoneHeight']) {\r\n                this.slideshow.style.height = this.options['phoneHeight'];\r\n            }\r\n            // All devices\r\n            else {\r\n                if (this.options['height'])\r\n                    this.slideshow.style.height = this.options['height'];\r\n                else\r\n                    this.slideshow.style.height = this.height + 'px';\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @desc Handles slideshow events\r\n     *\r\n     * @return {void}\r\n     */\r\n    slideEvents() {\r\n        if (this.options['isAutoplay']) {\r\n            // Pause on hover\r\n            if (this.options['hoverPause']) {\r\n                // Hover events \r\n                this.hoverEvents();\r\n            }\r\n            // Window events\r\n            this.windowEvents();\r\n        }\r\n    }\r\n    /**\r\n     * @desc Handles slides timer\r\n     *\r\n     * @var {number} progressWidth -- The slideshow progress width (0-100)\r\n     *\r\n     * @return {void}\r\n     */\r\n    slideTimer() {\r\n        // Clear the interval\r\n        if (this.timerInterval)\r\n            clearInterval(this.timerInterval);\r\n        if (this.options['isAutoplay']) {\r\n            // Check progress option\r\n            if (!this.pauseIntervals) {\r\n                let progressWidth;\r\n                // Default remaining time\r\n                if (this.remainingTime <= 0)\r\n                    this.remainingTime = this.options['timeout'];\r\n                // Set timer interval\r\n                this.timerInterval = setInterval(() => {\r\n                    // Set remaining time\r\n                    this.remainingTime -= 10;\r\n                    // Produce progress width\r\n                    progressWidth = 100 - ((this.remainingTime / this.options['timeout']) * 100);\r\n                    // Set the progress width\r\n                    if (this.options['hasProgress'])\r\n                        this.slideshowProgress.style.width = progressWidth + '%';\r\n                    // Check pause or remaining time\r\n                    if (this.pauseIntervals || this.remainingTime <= 0) {\r\n                        clearInterval(this.timerInterval);\r\n                        if (this.remainingTime <= 0 && this.options['hasProgress'])\r\n                            this.slideshowProgress.style.width = '0%';\r\n                    }\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @desc Sets a slide\r\n     *\r\n     * @param {number} index -- The index number\r\n     * @param {number} mode -- The slide mode (next, previous)\r\n     *\r\n     * @var {HTMLElement}   slide            -- The slideshow item (slide)\r\n     * @var {HTMLElement}   media            -- The item media\r\n     * @var {HTMLElement[]} overlays         -- The item overlays\r\n     * @var {HTMLElement[]} captions         -- The item captions\r\n     * @var {string}        mediaAnimation   -- The media animation\r\n     * @var {string}        overlayAnimation -- A specefic overlay animation\r\n     * @var {string}        captionAnimation -- A specefic caption animation\r\n     * @var {string}        slideMode        -- The slide mode {next, previous}\r\n     *\r\n     * @return {void}\r\n     */\r\n    setSlide(index, mode = null) {\r\n        // Check sliding\r\n        if (!this.sliding) {\r\n            // Reset the timer\r\n            this.remainingTime = 0;\r\n            // Clear the timer interval\r\n            if (this.timerInterval)\r\n                clearInterval(this.timerInterval);\r\n            // Reset the progress\r\n            if (this.options['hasProgress'])\r\n                this.slideshowProgress.style.width = '0%';\r\n            // Start sliding\r\n            this.sliding = true;\r\n            // Stop the slide interval\r\n            if (this.slideInterval)\r\n                clearInterval(this.slideInterval);\r\n            // Rest the progressbar\r\n            if (this.options['hasProgress'])\r\n                this.slideshowProgress.style.width = '0%';\r\n            // Default vaiables\r\n            let slide, media, overlays, captions;\r\n            let mediaAnimation, overlayAnimation, captionAnimation;\r\n            let slideMode;\r\n            // Set mode\r\n            if (mode)\r\n                slideMode = mode;\r\n            else if (index >= this.activeIndex)\r\n                slideMode = 'next';\r\n            else\r\n                slideMode = 'previous';\r\n            /**\r\n             * Old (current) Slide\r\n             */\r\n            if (!this.firstLoad) {\r\n                // Fetch old slide items\r\n                slide = this.slideshowItems[this.activeIndex];\r\n                media = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n                overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n                captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n                // Fetch the active slide & dot\r\n                this.activeItem = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowItem}.${this.nameActive}`);\r\n                this.activeDot = this.slideshow.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowDots} li.${this.nameActive}`);\r\n                // Remove active class\r\n                this.removeClass(this.activeItem, this.nameActive);\r\n                // Remove active dot class\r\n                if (this.activeDot) {\r\n                    // Remove active class\r\n                    this.removeClass(this.activeDot, this.nameActive);\r\n                }\r\n                // Hide media\r\n                if (media) {\r\n                    // Pause the media\r\n                    // Video\r\n                    if (media.querySelector('video'))\r\n                        media.querySelector('video').pause();\r\n                    // Audio\r\n                    if (media.querySelector('audio'))\r\n                        media.querySelector('audio').pause();\r\n                    // Find animation\r\n                    if (media.dataset.exit)\r\n                        mediaAnimation = media.dataset.exit;\r\n                    else if (media.dataset.exitPrev && slideMode == 'previous')\r\n                        mediaAnimation = media.dataset.exitPrev;\r\n                    else if (media.dataset.exitNext && slideMode == 'next')\r\n                        mediaAnimation = media.dataset.exitNext;\r\n                    else if (this.options['mediaExit'])\r\n                        mediaAnimation = this.options['mediaExit'];\r\n                    else if (this.options['mediaExitPrev'] && slideMode == 'previous')\r\n                        mediaAnimation = this.options['mediaExitPrev'];\r\n                    else if (this.options['mediaExitNext'] && slideMode == 'next')\r\n                        mediaAnimation = this.options['mediaExitNext'];\r\n                    else\r\n                        mediaAnimation = this.animationExit;\r\n                    // Set animation\r\n                    this.animation(media, mediaAnimation);\r\n                }\r\n                // Hide overlays\r\n                if (overlays.length) {\r\n                    overlays.forEach((overlay) => {\r\n                        // Find animation\r\n                        if (overlay.dataset.exit)\r\n                            overlayAnimation = overlay.dataset.exit;\r\n                        else if (overlay.dataset.exitPrev && slideMode == 'previous')\r\n                            overlayAnimation = overlay.dataset.exitPrev;\r\n                        else if (overlay.dataset.exitNext && slideMode == 'next')\r\n                            overlayAnimation = overlay.dataset.exitNext;\r\n                        else if (this.options['overlayExit'])\r\n                            overlayAnimation = this.options['overlayExit'];\r\n                        else if (this.options['overlayExitPrev'] && slideMode == 'previous')\r\n                            overlayAnimation = this.options['overlayExitPrev'];\r\n                        else if (this.options['overlayExitNext'] && slideMode == 'next')\r\n                            overlayAnimation = this.options['overlayExitNext'];\r\n                        else\r\n                            overlayAnimation = this.animationExit;\r\n                        // Set animation\r\n                        this.animation(overlay, overlayAnimation);\r\n                    });\r\n                }\r\n                // Hide captions\r\n                if (captions.length) {\r\n                    captions.forEach((caption) => {\r\n                        // Find animation\r\n                        if (caption.dataset.exit)\r\n                            captionAnimation = caption.dataset.exit;\r\n                        else if (caption.dataset.exitPrev && slideMode == 'previous')\r\n                            captionAnimation = caption.dataset.exitPrev;\r\n                        else if (caption.dataset.exitNext && slideMode == 'next')\r\n                            captionAnimation = caption.dataset.exitNext;\r\n                        else if (this.options['captionExit'])\r\n                            captionAnimation = this.options['captionExit'];\r\n                        else if (this.options['captionExitPrev'] && slideMode == 'previous')\r\n                            captionAnimation = this.options['captionExitPrev'];\r\n                        else if (this.options['captionExitNext'] && slideMode == 'next')\r\n                            captionAnimation = this.options['captionExitNext'];\r\n                        else\r\n                            captionAnimation = this.animationExit;\r\n                        // Set animation\r\n                        this.animation(caption, captionAnimation);\r\n                    });\r\n                }\r\n            }\r\n            /**\r\n             * New Slide\r\n             */\r\n            // Update the first load\r\n            if (this.firstLoad)\r\n                this.firstLoad = false;\r\n            // Find new slide items\r\n            slide = this.slideshowItems[index];\r\n            media = slide.querySelector(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowMedia}`);\r\n            overlays = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowOverlay}`);\r\n            captions = slide.querySelectorAll(`.${this.nameSlideshow + this.chiSep + this.nameSlideshowCaption}`);\r\n            // Update the active item\r\n            this.activeItem = slide;\r\n            // Add active class to slide\r\n            this.addClass(slide, this.nameActive);\r\n            // Add active class to relative dot\r\n            this.slideshowDots.forEach((dot) => {\r\n                if (Number(dot.dataset.index) == index) {\r\n                    this.addClass(dot, this.nameActive);\r\n                    // Update the active dot\r\n                    this.activeDot = dot;\r\n                }\r\n            });\r\n            // Show media\r\n            if (media) {\r\n                // Reload the media\r\n                if (this.options['mediaAutoplay']) {\r\n                    // Video\r\n                    if (media.querySelector('video')) {\r\n                        media.querySelector('video').load();\r\n                        media.querySelector('video').play();\r\n                    }\r\n                    // Audio\r\n                    if (media.querySelector('audio')) {\r\n                        media.querySelector('audio').load();\r\n                        media.querySelector('audio').play();\r\n                    }\r\n                }\r\n                // Find animation\r\n                if (media.dataset.enter)\r\n                    mediaAnimation = media.dataset.enter;\r\n                else if (media.dataset.enterPrev && slideMode == 'previous')\r\n                    mediaAnimation = media.dataset.enterPrev;\r\n                else if (media.dataset.enterNext && slideMode == 'next')\r\n                    mediaAnimation = media.dataset.enterNext;\r\n                else if (this.options['mediaEnter'])\r\n                    mediaAnimation = this.options['mediaEnter'];\r\n                else if (this.options['mediaEnterPrev'] && slideMode == 'previous')\r\n                    mediaAnimation = this.options['mediaEnterPrev'];\r\n                else if (this.options['mediaEnterNext'] && slideMode == 'next')\r\n                    mediaAnimation = this.options['mediaEnterNext'];\r\n                else\r\n                    mediaAnimation = this.animationEnter;\r\n                // Set animation\r\n                this.animation(media, mediaAnimation).then(() => {\r\n                    // Clear the timer interval\r\n                    if (this.timerInterval)\r\n                        clearInterval(this.timerInterval);\r\n                    // Stop the intervals\r\n                    if (this.slideInterval)\r\n                        clearInterval(this.slideInterval);\r\n                    // Run Autoplay\r\n                    this.autoSlide();\r\n                    // Run timer\r\n                    this.slideTimer();\r\n                    // Stop sliding\r\n                    this.sliding = false;\r\n                });\r\n            }\r\n            // Show overlays\r\n            if (overlays.length) {\r\n                overlays.forEach((overlay) => {\r\n                    // Find animation\r\n                    if (overlay.dataset.enter)\r\n                        overlayAnimation = overlay.dataset.enter;\r\n                    else if (overlay.dataset.enterPrev && slideMode == 'previous')\r\n                        overlayAnimation = overlay.dataset.enterPrev;\r\n                    else if (overlay.dataset.enterNext && slideMode == 'next')\r\n                        overlayAnimation = overlay.dataset.enterNext;\r\n                    else if (this.options['overlayEnter'])\r\n                        overlayAnimation = this.options['overlayEnter'];\r\n                    else if (this.options['overlayEnterPrev'] && slideMode == 'previous')\r\n                        overlayAnimation = this.options['overlayEnterPrev'];\r\n                    else if (this.options['overlayEnterNext'] && slideMode == 'next')\r\n                        overlayAnimation = this.options['overlayEnterNext'];\r\n                    else\r\n                        overlayAnimation = this.animationEnter;\r\n                    // Set animation\r\n                    this.animation(overlay, overlayAnimation);\r\n                });\r\n            }\r\n            // Show captions\r\n            if (captions.length) {\r\n                captions.forEach((caption) => {\r\n                    // Find animation\r\n                    if (caption.dataset.enter)\r\n                        captionAnimation = caption.dataset.enter;\r\n                    else if (caption.dataset.enterPrev && slideMode == 'previous')\r\n                        captionAnimation = caption.dataset.enterPrev;\r\n                    else if (caption.dataset.enterNext && slideMode == 'next')\r\n                        captionAnimation = caption.dataset.enterNext;\r\n                    else if (this.options['captionEnter'])\r\n                        captionAnimation = this.options['captionEnter'];\r\n                    else if (this.options['captionEnterPrev'] && slideMode == 'previous')\r\n                        captionAnimation = this.options['captionEnterPrev'];\r\n                    else if (this.options['captionEnterNext'] && slideMode == 'next')\r\n                        captionAnimation = this.options['captionEnterNext'];\r\n                    else\r\n                        captionAnimation = this.animationEnter;\r\n                    // Set animation\r\n                    this.animation(caption, captionAnimation);\r\n                });\r\n            }\r\n            // Set counter\r\n            if (this.options['hasCounter'])\r\n                this.slideshowCounter.innerHTML = `${Number(slide.dataset.index) + 1}/${this.itemsCount}`;\r\n            // Update active index\r\n            this.activeIndex = index;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Slideshow.js.map"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Config","constructor","this","modSep","chiSep","sibSep","parSep","nameDoc","nameLight","nameDark","nameAnimation","nameAnimated","nameRipple","nameAlert","nameMessages","nameBackdrop","namePopup","nameMenu","nameModal","nameBlueprint","nameContainer","nameControl","nameIcon","nameContent","nameClose","nameClick","nameActive","nameVoid","nameOpen","nameHeader","nameBody","nameFooter","nameWidth","nameHeight","nameRadius","namePosition","fadeInAnimation","fadeOutAnimation","hideYAnimation","rippleAnimation","rippleAutoAnimation","piAlertCircle","piAlertTri","piAlertTick","piClose","hideTimeout","alertPosition","polarisSizes","phoneWidth","tabletWidth","desktopWidth","Helpers","super","removeBefore","str","find","strict","split","pop","removeAfter","exist","selector","result","status","message","document","querySelectorAll","length","querySelector","selectors","visible","from","tolerance","rect","windowHeight","window","innerHeight","viewHeight","Math","max","documentElement","clientHeight","getBoundingClientRect","bottom","top","prepend","parent","content","classList","id","style","attrs","parentNode","node","createElement","forEach","cls","add","setAttribute","cssText","attr","innerHTML","insertBefore","firstChild","append","appendChild","remove","write","open","close","loop","fn","delay","count","Infinity","i","interval","setInterval","clearInterval","loaded","addEventListener","escape","replace","RegExp","redirect","url","location","href","origin","scrollWidth","innerWidth","clientWidth","fileExist","file","xhr","XMLHttpRequest","send","json","Promise","resolve","reject","final","fetch","then","response","text","copy","navigator","clipboard","writeText","err","console","error","addClass","contains","removeClass","toggleClass","oldCls","newCls","addClasses","upper","toLocaleUpperCase","lower","toLocaleLowerCase","getStyle","property","view","ownerDocument","defaultView","getComputedStyle","getPropertyValue","isFullscreen","screen","width","height","fullscreen","elem","requestFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullScreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","Animations","animation","clear","removeProperty","datasets","setProperty","event","stopPropagation","once","dataset","duration","function","state","position","scale","perspective","degree","brightness","dimension","animated","mod","nodes","animationEnter","enter","animationExit","exit","animating","getAttribute","offsetTop","navigated","active","navigators","scrollY","offsetHeight","offset","link","Alerts","alert","color","statusCode","statusClass","colorClass","closeCode","closeClass","element","child","timeout","setTimeout","onclick","clearTimeout","Modal","modal","title","body","footer","size","backdrop","sizeCLass","includes","footerCode","bdrop","outerHTML","bodyElement","paddingRight","overflow","setModal","Defaults","docDefaults","doc","scheme","matchMedia","matches","onchange","linkDefaults","rippleDefaults","x","clientX","y","clientY","REC","DIM","sqrt","pow","removeAttribute","left","animationDefaults","messageDefaults","parentElement","popupDefaults","popup","ignoreClick","j","target","menuDefaults","submenu","animationIn","animationOut","onmouseover","onmouseout","Blueprints","backdropBlueprint","alertBlueprint","modalBlueprint","Core","mode","chain","e","html","init","Slideshow","slideshow","options","nameSlideshow","nameSlideshowItem","nameSlideshowMedia","nameSlideshowOverlays","nameSlideshowOverlay","nameSlideshowCaptions","nameSlideshowCaption","nameSlideshowOption","nameSlideshowProgress","nameSlideshowCounter","nameSlideshowPrev","nameSlideshowNext","nameSlideshowDots","nameSlideshowFilter","slideshowItems","slideshowMedias","slideshowProgress","slideshowCounter","slideshowPrev","slideshowNext","slideshowDots","itemsCount","activeItem","activeDot","activeIndex","slideInterval","timerInterval","pauseIntervals","remainingTime","sliding","firstLoad","mediaLoaded","mediaShrink","isAutoplay","hoverPause","hasProgress","hasCounter","hasControls","hasDots","slideshowColor","mediaFilter","mediaControls","mediaAutoplay","start","setItems","setOptions","prevSlide","nextSlide","dotSlide","slideEvents","setSlide","index","media","setContent","overlay","caption","fileExtension","ext","arr","inner","maxWidth","alt","type","controls","muted","Number","src","firstElementChild","maxHeight","onload","naturalWidth","onloadedmetadata","controlsContent","dotsContent","display","windowWidth","filterCls","inset","margin","dots","captions","overlays","dot","autoSlide","remain","click","hoverEvents","onmouseleave","slideTimer","windowEvents","onblur","pause","onfocus","play","onresize","progressWidth","slide","mediaAnimation","overlayAnimation","captionAnimation","slideMode","exitPrev","exitNext","load","enterPrev","enterNext"],"sourceRoot":""}